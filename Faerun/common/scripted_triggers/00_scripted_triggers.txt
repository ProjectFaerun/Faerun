# Various triggers, not categorised

# is_inaccessible_trigger
# is_inaccessible_or_incapable_trigger
# block_general_event_trigger
# is_unimportant_trigger
# useless_character_trigger
# interesting_face_trigger
# is_virgin_trigger

# proselytize_convert_independent_trigger

# has_tribal_or_nomadic_government_trigger

# is_mongol_empire_leader_trigger

# print_scope_trigger
# is_visible_to_self_trigger
# is_single_player_observer_mode
# is_not_in_regency_trigger

has_secret_religion_trait_trigger = {
	custom_tooltip = {
		text = no_secret_religion
		has_secret_religion = yes
	}
}

# Remember to write this "is_inaccessible_trigger = no" when scripting, or the tooltip will be messed up (it reads "Is NOT in Hiding, in Seclusion, or out traveling")
is_inaccessible_trigger = {
	custom_tooltip = {
		text = is_inaccessible_tooltip

		OR = {
			has_character_flag = do_not_disturb
			has_character_flag = flag_holding_great_tribal_festival
			trait = in_hiding
			trait = troubled_pregnancy
			trait = pregnancy_finishing
			is_pilgrim = yes
			in_seclusion = yes
			has_character_modifier = mother_minor_rest
			has_character_modifier = in_meditation
			has_character_modifier = doing_penance
			has_character_modifier = out_traveling
			trait = creature_monster
			trait = is_spelljamming
			#trait = creature_elder_brain
		}
	}
}

is_unimportant_trigger = {
	NOR = {
		is_married = yes
		is_landed = yes
		has_job_title = yes
		has_minor_title = yes

		trigger_if = {
			limit = { is_lowborn = no }
			num_of_dynasty_members >= 2
		}

		any_lover = { ai = no }
		any_close_relative = { ai = no }
		any_friend = { ai = no }
		any_rival = { ai = no }
		any_consort = { ai = no }

		num_of_claims >= 1
		has_character_flag = eternal_life_mystic
		trait = horse
		in_seclusion = yes
		has_character_modifier = elder_long_life_modifier
		immortal = yes
		z_legendary_class = yes
	}
}

sad_example_trigger = {
	age = 30
	is_married = no
	NOT = { num_of_children = 1 }
}

can_be_prophet_of_doom_trigger = {
	is_adult = yes
	is_married = no
	trait = zealous
	is_landed = no

	OR = {
		trait = ambitious
		trait = misguided_warrior
		trait = elusive_shadow
		trait = lunatic
		trait = possessed
		trait = paranoid
		trait = stubborn
	}
	NOR = {
		trait = content
		trait = cynical
		trait = temperate
		is_main_spouse = yes
		is_landed = yes
		is_close_relative = ROOT
	}
	ai = yes
}

death_duel_kill_trigger = {
	OR = {
		death_reason = death_duel
		death_reason = death_mission_duel
		death_reason = death_battle_duel
		death_reason = death_legendary_fail_duel
		death_reason = death_legendary_win_duel
		death_reason = death_claim_duel_attacker
		death_reason = death_claim_duel_defender
	}
}

# Very usable! If poorly named
block_general_event_trigger = {
	OR = {
		is_adult = no
		is_inaccessible_or_incapable_trigger = yes
		hidden_trigger = { is_alive = no }
	}
}

#Has same education as prev?

useless_character_trigger = {
	OR = {
		health < 2.5
		is_incapable = yes
		trait = lunatic
		trait = maimed
		trait = infirm
		trait = mangled
		trait = severely_injured
		trait = imbecile
		trait = inbred
	}
}

#True religion triggers
true_religion_group_good_human_pantheon_group_trigger = {
	true_religion_group = good_human_pantheon_group
}
true_religion_group_wild_human_pantheon_group_trigger = {
	true_religion_group = wild_human_pantheon_group
}
true_religion_group_evil_human_pantheon_group_trigger = {
	true_religion_group = evil_human_pantheon_group
}
true_religion_group_qismaite_group_trigger = {
	true_religion_group = qismaite_group
}
true_religion_group_karaturan_group_trigger = {
	true_religion_group = karaturan_group
}
true_religion_group_elven_pantheon_group_trigger = {
	true_religion_group = elven_pantheon_group
}
true_religion_group_drow_pantheon_trigger = {
	true_religion_group = drow_pantheon
}
true_religion_group_dwarven_pantheon_group_trigger = {
	true_religion_group = dwarven_pantheon_group
}
true_religion_group_giant_pantheon_group_trigger = {
	true_religion_group = giant_pantheon_group
}
true_religion_group_draconic_group_trigger = {
	true_religion_group = draconic_group
}
true_religion_elven_pantheon_trigger = {
	true_religion = elven_pantheon
}
true_religion_qisma_trigger = {
	true_religion = qisma
}
true_religion_group_humanoid_group_trigger = {
	true_religion_group = humanoid_group
}
true_religion_group_unenlightened_group_trigger = {
	true_religion_group = unenlightened_group
}
true_religion_group_atheist_group_trigger = {
	true_religion_group = atheist_group
}

# FROMs_religion_is_playable_trigger - removed for Faerun

# ROOTs_religion_is_playable_trigger - removed for Faerun

# ROOTs_secret_religion_is_playable_trigger - removed for Faerun

# relative triggers to leave in until we are sure they are not needed - tsf4

cousin_of_root_trigger = {
	is_cousin_of = ROOT
}

sibling_of_root_trigger = {
	sibling = ROOT
}

sibling_child_of_root_trigger = {
	is_nibling_of = ROOT
}

parent_sibling_of_root_trigger = {
	is_aunt_uncle_of = ROOT
}

grandchild_of_root_trigger = {
	is_grandchild_of = ROOT
}

assassins_appropriate_target_trigger = {
	is_within_diplo_range = ROOT
	is_adult = yes
	is_quest_target = no

	trigger_if = {
        limit = { is_ruler = yes }
        ROOT = { is_member_of_any_assassin_guild_trigger = yes}
        trigger_if = {
            limit = { ROOT = { society_rank == 3 } }
            higher_real_tier_than = COUNT
        }
        trigger_else_if = {
            limit = { ROOT = { society_rank == 2 } }
            lower_real_tier_than = EMPEROR
        }
        trigger_else_if = {
            limit = { ROOT = { society_rank == 1 } }
            lower_real_tier_than = DUKE
        }
    }
}

interesting_face_trigger = {
	OR = {
		is_ill = yes
		has_scarred_trait_trigger = yes
		is_strong_trigger = yes
		is_weak_trigger = yes
		has_fair_trait_trigger = yes
		has_ugly_trait_trigger = yes
		trait = disfigured
		trait = blinded
		trait = one_eyed
		trait = leper
		trait = harelip
		trait = lunatic
		trait = possessed
		trait = rabies
		trait = horse
	}
}

can_pay_assassins_debt = {
	OR = {
		AND = {
			is_variable_equal = { which = assassins_debt value = 50 }
			wealth = 50
		}
		AND = {
			is_variable_equal = { which = assassins_debt value = 250 }
			wealth = 250
		}
		AND = {
			is_variable_equal = { which = assassins_debt value = 300 }
			wealth = 300
		}
		AND = {
			is_variable_equal = { which = assassins_debt value = 500 }
			wealth = 500
		}
	}
}

is_any_monastic_member_trigger = {
	OR = {
		society_member_of = monastic_order_sun_soul
		society_member_of = monastic_order_long_death
		society_member_of = monastic_order_empty_hand
		society_member_of = monastic_order_old_order
		society_member_of = monastic_order_nog
	}
}

is_good_monastic_member_trigger = {
	society_member_of = monastic_order_sun_soul
}

is_evil_monastic_member_trigger = {
	society_member_of = monastic_order_long_death
}

is_lawful_neutral_monastic_member_trigger = {
	 OR = {
		 society_member_of = monastic_order_empty_hand
		 society_member_of = monastic_order_old_order
		 society_member_of = monastic_order_nog
	 }
}

is_virgin_trigger = {
	OR = {
		#practical_age < 25
		trait = celibate
		trait = chaste
		trait = shy
		is_ascetic_trigger = yes
	}

	has_children = no
	has_lover = no
	is_pregnant = no

	NOR = {
		any_spouse_even_if_dead = { always = yes }
		has_focus = focus_seduction
		trait = pregnant
		trait = lustful
		trait = hedonist
		trait = seducer
		trait = seductress
		trait = lovers_pox
		trait = has_aztec_disease
		trait = syphilitic
	}
}

print_scope_trigger = {
	log = "------------------------------"
	log = "- Printing the current scope -"
	log = "- This: [This.GetName][This.GetBestName]"
	log = "- Root: [Root.GetName][Root.GetBestName]"
	log = "- Prev: [Prev.GetName][Prev.GetBestName]"
	log = "- PrevPrev: [PrevPrev.GetName][PrevPrev.GetBestName]"
	log = "- PrevPrevPrev: [PrevPrevPrev.GetName][PrevPrevPrev.GetBestName]"
	log = "- PrevPrevPrevPrev: [PrevPrevPrevPrev.GetName][PrevPrevPrevPrev.GetBestName]"
	log = "- From: [From.GetName][From.GetBestName]"
	log = "- FromFrom: [FromFrom.GetName][FromFrom.GetBestName]"
	log = "- FromFromFrom: [FromFromFrom.GetName][FromFromFrom.GetBestName]"
	log = "- FromFromFromFrom: [FromFromFromFrom.GetName][FromFromFromFrom.GetBestName]"
	log = "- Event_target:test_target1: [test_target1.GetName][test_target1.GetBestName]"
	log = "- Event_target:test_target2: [test_target2.GetName][test_target2.GetBestName]"
	log = "- Event_target:test_target3: [test_target3.GetName][test_target3.GetBestName]"
	log = "------------------------------"
}

is_secret_religious_society_member_trigger = {
	society_member_of = secret_religious_cult
}

is_openly_of_prevs_secret_religion_trigger = {
	religion = { target = PREV target_type = secret }
}

is_openly_of_roots_secret_religion_trigger = {
	religion = { target = ROOT target_type = secret }
}

has_prevs_secret_religion_truly_trigger = {
	secret_religion = { target = PREV target_type = true }
}

has_roots_secret_religion_truly_trigger = {
	secret_religion = { target = ROOT target_type = true }
}

has_my_liege_secret_religion_truly_trigger = {
	secret_religion = { target = event_target:my_liege target_type = true }
}

shares_prevs_secret_religion_trigger = {
	secret_religion = PREV
}

shares_true_religion_group_with_prev_trigger = {
	true_religion_group = PREV
}

is_openly_of_prevs_true_religion_group = {
	religion_group = { target = PREV target_type = true }
}

is_visible_to_self_trigger = { #For hidden modifiers
	custom_tooltip = {
		text =  is_visible_to_self_trigger_tooltip
		character = FROM
	}
}

have_duplicate_goldsmith_artifacts_flag_okay_trigger = {
	OR = {
		AND = {
			OR = {
				religion_group = good_human_pantheon_group
				religion_group = evil_human_pantheon_group
				religion = yuir
				religion = yuir_reformed
				NOT = { religion = mulhorandi_faith }
				NOT = { religion = untheric_faith }
				NOT = { religion = uthgardt_faith }
			}
			has_artifact = the_lily_crown
			has_artifact = noble_scepter
			has_artifact = engraved_sword
		}
		AND = {
			OR = {
				religion_group = qismaite_group
				religion = ubtao_worship
				# religion = ubtao_reformed
			}
			has_artifact = engraved_dagger
			has_artifact = silver_bracelets
		}
		AND = {
			OR = {
				religion_group = karaturan_group
				religion = nogari
				religion = nogari_reformed
			}
			has_artifact = engraved_dagger
			has_artifact = collar_of_pearls
		}
		AND = {
			OR = {
				religion = mulhorandi_faith
				religion = untheric_faith
			}
			has_artifact = circlet_of_twilight
			has_artifact = silver_staff
		}
		AND = {
			OR = {
				religion = uthgardt_faith
				religion = ulutiuan
				religion = ulutiuan_reformed
			}
			has_artifact = iron_crown
			has_artifact = engraved_sword
		}
		AND = {
			has_artifact = engraved_crown
			has_artifact = ceremonial_axe
		}
	}
}

have_duplicate_goldsmith_artifacts_flag_good_trigger = {
	OR = {
		AND = {
			OR = {
				religion_group = good_human_pantheon_group
				religion_group = evil_human_pantheon_group
				religion = yuir
				religion = yuir_reformed
				NOT = { religion = mulhorandi_faith }
				NOT = { religion = untheric_faith }
				NOT = { religion = uthgardt_faith }
			}
			has_artifact = crown_of_pearls
			has_artifact = ruby_scepter
			has_artifact = golden_sword
		}
		AND = {
			OR = {
				religion_group = qismaite_group
				religion = ubtao_worship
				# religion = ubtao_reformed
			}
			has_artifact = bejeweled_dagger
			has_artifact = golden_bracelets
		}
		AND = {
			OR = {
				religion_group = karaturan_group
				religion = nogari
				religion = nogari_reformed
			}
			has_artifact = bejeweled_dagger
			has_artifact = necklace_of_radiance
		}
		AND = {
			OR = {
				religion = mulhorandi_faith
				religion = untheric_faith
			}
			has_artifact = circlet_of_the_heavens
			has_artifact = golden_staff
		}
		AND = {
			OR = {
				religion = uthgardt_faith
				religion = ulutiuan
				religion = ulutiuan_reformed
			}
			has_artifact = crown_of_the_sea
			has_artifact = golden_sword
		}
		AND = {
			has_artifact = amber_crown
			has_artifact = obsidian_axe
		}
	}
}

have_duplicate_goldsmith_artifacts_flag_expensive_trigger = {
	OR = {
		AND = {
			OR = {
				religion_group = good_human_pantheon_group
				religion_group = evil_human_pantheon_group
				religion = yuir
				religion = yuir_reformed
				NOT = { religion = mulhorandi_faith }
				NOT = { religion = untheric_faith }
				NOT = { religion = uthgardt_faith }
			}
			has_artifact = crown_of_majesty
			has_artifact = emerald_scepter
			has_artifact = sword_of_heroes
		}
		AND = {
			OR = {
				religion_group = qismaite_group
				religion = ubtao_worship
				# religion = ubtao_reformed
			}
			has_artifact = dagger_of_glory
			has_artifact = ruby_bracelets
		}
		AND = {
			OR = {
				religion_group = karaturan_group
				religion = nogari
				religion = nogari_reformed
			}
			has_artifact = dagger_of_glory
			has_artifact = celestial_necklace
		}
		AND = {
			OR = {
				religion = mulhorandi_faith
				religion = untheric_faith
			}
			has_artifact = circlet_of_the_heavens
			has_artifact = staff_of_majesty
		}
		AND = {
			OR = {
				religion = uthgardt_faith
				religion = ulutiuan
				religion = ulutiuan_reformed
			}
			has_artifact = crown_of_crows
			has_artifact = sword_of_heroes
		}
		AND = {
			has_artifact = heros_crown
			has_artifact = axe_of_the_ancestors
		}
	}
}

have_duplicate_goldsmith_artifacts_flag_amazing_trigger = {
	OR = {
		AND = {
			OR = {
				religion_group = good_human_pantheon_group
				religion_group = evil_human_pantheon_group
				religion = yuir
				religion = yuir_reformed
				NOT = { religion = mulhorandi_faith }
				NOT = { religion = untheric_faith }
				NOT = { religion = uthgardt_faith }
			}
			has_artifact = crown_of_majesty_2
			has_artifact = emerald_scepter_2
			has_artifact = sword_of_heroes_2
		}
		AND = {
			OR = {
				religion_group = qismaite_group
				religion = ubtao_worship
				# religion = ubtao_reformed
			}
			has_artifact = dagger_of_glory_2
			has_artifact = ruby_bracelets_2
		}
		AND = {
			OR = {
				religion_group = karaturan_group
				religion = nogari
				religion = nogari_reformed
			}
			has_artifact = dagger_of_glory_2
			has_artifact = celestial_necklace_2
		}
		AND = {
			OR = {
				religion = mulhorandi_faith
				religion = untheric_faith
			}
			has_artifact = circlet_of_the_heavens_2
			has_artifact = staff_of_majesty_2
		}
		AND = {
			OR = {
				religion = uthgardt_faith
				religion = ulutiuan
				religion = ulutiuan_reformed
			}
			has_artifact = crown_of_crows_2
			has_artifact = sword_of_heroes_2
		}
		AND = {
			has_artifact = heros_crown_2
			has_artifact = axe_of_the_ancestors_2
		}
	}
}

have_all_armorsmith_artifacts_all_flags_trigger = {
	has_artifact = armor_tier_4_guardian
	has_artifact = armor_tier_4_champion
	has_artifact = armor_tier_4_warden
	has_artifact = armor_tier_3_guardian
	has_artifact = armor_tier_3_champion
	has_artifact = armor_tier_3_warden
	has_artifact = armor_tier_2
	has_artifact = armor_tier_1
}

have_all_weaponsmith_artifacts_all_flags_trigger = {
	trigger_if = {
		limit = {
			NOR = {
				religion_group = qismaite_group
				has_dharmic_religion_trigger = yes
			}
		}
		have_all_weaponsmith_swords_all_flags_trigger = yes
	}
	trigger_if = {
		limit = {
			OR = {
				religion_group = qismaite_group
				has_dharmic_religion_trigger = yes
			}
		}
		have_all_weaponsmith_scimitar_all_flags_trigger = yes
	}
	trigger_if = {
		limit = { is_nomadic = yes }
		have_all_weaponsmith_bow_all_flags_trigger = yes
	}

	have_all_weaponsmith_lance_all_flags_trigger = yes
	have_all_weaponsmith_axe_all_flags_trigger = yes
	have_all_weaponsmith_mace_all_flags_trigger = yes
}

have_all_weaponsmith_mace_all_flags_trigger = {
	has_artifact = mace_tier_4_foe_hammer
	has_artifact = mace_tier_3_foe_hammer
	has_artifact = mace_tier_4_bone_breaker
	has_artifact = mace_tier_3_bone_breaker
	has_artifact = mace_tier_4_shatterer
	has_artifact = mace_tier_3_shatterer
	has_artifact = mace_tier_2_new
	has_artifact = mace_tier_1_new
}

have_all_weaponsmith_axe_all_flags_trigger = {
	has_artifact = axe_tier_4_cleaver
	has_artifact = axe_tier_3_cleaver
	has_artifact = axe_tier_4_ravager
	has_artifact = axe_tier_3_ravager
	has_artifact = axe_tier_4_marauder
	has_artifact = axe_tier_3_marauder
	has_artifact = axe_tier_2_new
	has_artifact = axe_tier_1_new
}

have_all_weaponsmith_lance_all_flags_trigger = {
	has_artifact = lance_tier_4_impaler
	has_artifact = lance_tier_3_impaler
	has_artifact = lance_tier_4_trident
	has_artifact = lance_tier_3_trident
	has_artifact = lance_tier_4_piercer
	has_artifact = lance_tier_3_piercer
	has_artifact = lance_tier_2_new
	has_artifact = lance_tier_1_new
}

have_all_weaponsmith_swords_all_flags_trigger = {
	has_artifact = sword_tier_4_heartseeker
	has_artifact = sword_tier_3_heartseeker
	has_artifact = sword_tier_4_vengeance
	has_artifact = sword_tier_3_vengeance
	has_artifact = sword_tier_4_fury
	has_artifact = sword_tier_3_fury
	has_artifact = sword_tier_2_new
	has_artifact = sword_tier_1_new
}

have_all_weaponsmith_scimitar_all_flags_trigger = {
	has_artifact = scimitar_tier_4_golden
	has_artifact = scimitar_tier_3_golden
	has_artifact = scimitar_tier_4_fortune
	has_artifact = scimitar_tier_3_fortune
	has_artifact = scimitar_tier_4_conquest
	has_artifact = scimitar_tier_3_conquest
	has_artifact = scimitar_tier_2_new
	has_artifact = scimitar_tier_1_new
}

have_all_weaponsmith_bow_all_flags_trigger = {
	has_artifact = bow_tier_4_silent_wind
	has_artifact = bow_tier_3_silent_wind
	has_artifact = bow_tier_4_lightning
	has_artifact = bow_tier_3_lightning
	has_artifact = bow_tier_4_eagle
	has_artifact = bow_tier_3_eagle
	has_artifact = bow_tier_2_new
	has_artifact = bow_tier_1_new
}

have_duplicate_smith_artifacts_flag_okay_trigger = {
	OR = {
		AND = {
			FROM = { has_character_flag = weapon_sword }
			has_artifact = sword_tier_1_new
		}
		AND = {
			FROM = { has_character_flag = weapon_scimitar }
			has_artifact = scimitar_tier_1_new
		}
		AND = {
			FROM = { has_character_flag = weapon_lance }
			has_artifact = lance_tier_1_new
		}
		AND = {
			FROM = { has_character_flag = weapon_axe }
			has_artifact = axe_tier_1_new
		}
		AND = {
			FROM = { has_character_flag = weapon_mace }
			has_artifact = mace_tier_1_new
		}
		AND = {
			FROM = { has_character_flag = weapon_bow }
			has_artifact = bow_tier_1_new
		}
		AND = {
			FROM = { has_character_flag = armor_set }
			has_artifact = armor_tier_1
		}
	}
}

have_duplicate_smith_artifacts_flag_good_trigger = {
	OR = {
		AND = {
			FROM = { has_character_flag = weapon_sword }
			has_artifact = sword_tier_2_new
		}
		AND = {
			FROM = { has_character_flag = weapon_scimitar }
			has_artifact = scimitar_tier_2_new
		}
		AND = {
			FROM = { has_character_flag = weapon_lance }
			has_artifact = lance_tier_2_new
		}
		AND = {
			FROM = { has_character_flag = weapon_axe }
			has_artifact = axe_tier_2_new
		}
		AND = {
			FROM = { has_character_flag = weapon_mace }
			has_artifact = mace_tier_2_new
		}
		AND = {
			FROM = { has_character_flag = weapon_bow }
			has_artifact = bow_tier_2_new
		}
		AND = {
			FROM = { has_character_flag = armor_set }
			has_artifact = armor_tier_2
		}
	}
}

have_duplicate_smith_artifacts_flag_amazing_optionA_trigger = {
	OR = {
		AND = {
			FROM = { has_character_flag = weapon_sword }
			has_artifact = sword_tier_4_heartseeker
		}
		AND = {
			FROM = { has_character_flag = weapon_scimitar }
			has_artifact = scimitar_tier_4_golden
		}
		AND = {
			FROM = { has_character_flag = weapon_lance }
			has_artifact = lance_tier_4_impaler
		}
		AND = {
			FROM = { has_character_flag = weapon_axe }
			has_artifact = axe_tier_4_cleaver
		}
		AND = {
			FROM = { has_character_flag = weapon_mace }
			has_artifact = mace_tier_4_foe_hammer
		}
		AND = {
			FROM = { has_character_flag = weapon_bow }
			has_artifact = bow_tier_4_silent_wind
		}
		AND = {
			FROM = { has_character_flag = armor_set }
			has_artifact = armor_tier_4_guardian
		}
	}
}

have_duplicate_smith_artifacts_flag_amazing_optionB_trigger = {
	OR = {
		AND = {
			FROM = { has_character_flag = weapon_sword }
			has_artifact = sword_tier_4_vengeance
		}
		AND = {
			FROM = { has_character_flag = weapon_scimitar }
			has_artifact = scimitar_tier_4_fortune
		}
		AND = {
			FROM = { has_character_flag = weapon_lance }
			has_artifact = lance_tier_4_trident
		}
		AND = {
			FROM = { has_character_flag = weapon_axe }
			has_artifact = axe_tier_4_ravager
		}
		AND = {
			FROM = { has_character_flag = weapon_mace }
			has_artifact = mace_tier_4_bone_breaker
		}
		AND = {
			FROM = { has_character_flag = weapon_bow }
			has_artifact = bow_tier_4_lightning
		}
		AND = {
			FROM = { has_character_flag = armor_set }
			has_artifact = armor_tier_4_champion
		}
	}
}

have_duplicate_smith_artifacts_flag_amazing_optionC_trigger = {
	OR = {
		AND = {
			FROM = { has_character_flag = weapon_sword }
			has_artifact = sword_tier_4_fury
		}
		AND = {
			FROM = { has_character_flag = weapon_scimitar }
			has_artifact = scimitar_tier_4_conquest
		}
		AND = {
			FROM = { has_character_flag = weapon_lance }
			has_artifact = lance_tier_4_piercer
		}
		AND = {
			FROM = { has_character_flag = weapon_axe }
			has_artifact = axe_tier_4_marauder
		}
		AND = {
			FROM = { has_character_flag = weapon_mace }
			has_artifact = mace_tier_4_shatterer
		}
		AND = {
			FROM = { has_character_flag = weapon_bow }
			has_artifact = bow_tier_4_eagle
		}
		AND = {
			FROM = { has_character_flag = armor_set }
			has_artifact = armor_tier_4_warden
		}
	}
}

have_duplicate_smith_artifacts_flag_expensive_optionA_trigger = {
	OR = {
		AND = {
			FROM = { has_character_flag = weapon_sword }
			has_artifact = sword_tier_3_heartseeker
		}
		AND = {
			FROM = { has_character_flag = weapon_scimitar }
			has_artifact = scimitar_tier_3_golden
		}
		AND = {
			FROM = { has_character_flag = weapon_lance }
			has_artifact = lance_tier_3_impaler
		}
		AND = {
			FROM = { has_character_flag = weapon_axe }
			has_artifact = axe_tier_3_cleaver
		}
		AND = {
			FROM = { has_character_flag = weapon_mace }
			has_artifact = mace_tier_3_foe_hammer
		}
		AND = {
			FROM = { has_character_flag = weapon_bow }
			has_artifact = bow_tier_3_silent_wind
		}
		AND = {
			FROM = { has_character_flag = armor_set }
			has_artifact = armor_tier_3_guardian
		}
	}
}

have_duplicate_smith_artifacts_flag_expensive_optionB_trigger = {
	OR = {
		AND = {
			FROM = { has_character_flag = weapon_sword }
			has_artifact = sword_tier_3_vengeance
		}
		AND = {
			FROM = { has_character_flag = weapon_scimitar }
			has_artifact = scimitar_tier_3_fortune
		}
		AND = {
			FROM = { has_character_flag = weapon_lance }
			has_artifact = lance_tier_3_trident
		}
		AND = {
			FROM = { has_character_flag = weapon_axe }
			has_artifact = axe_tier_3_ravager
		}
		AND = {
			FROM = { has_character_flag = weapon_mace }
			has_artifact = mace_tier_3_bone_breaker
		}
		AND = {
			FROM = { has_character_flag = weapon_bow }
			has_artifact = bow_tier_3_lightning
		}
		AND = {
			FROM = { has_character_flag = armor_set }
			has_artifact = armor_tier_3_champion
		}
	}
}

have_duplicate_smith_artifacts_flag_expensive_optionC_trigger = {
	OR = {
		AND = {
			FROM = { has_character_flag = weapon_sword }
			has_artifact = sword_tier_3_fury
		}
		AND = {
			FROM = { has_character_flag = weapon_scimitar }
			has_artifact = scimitar_tier_3_conquest
		}
		AND = {
			FROM = { has_character_flag = weapon_lance }
			has_artifact = lance_tier_3_piercer
		}
		AND = {
			FROM = { has_character_flag = weapon_axe }
			has_artifact = axe_tier_3_marauder
		}
		AND = {
			FROM = { has_character_flag = weapon_mace }
			has_artifact = mace_tier_3_shatterer
		}
		AND = {
			FROM = { has_character_flag = weapon_bow }
			has_artifact = bow_tier_3_eagle
		}
		AND = {
			FROM = { has_character_flag = armor_set }
			has_artifact = armor_tier_3_warden
		}
	}
}

is_born_in_january_trigger = {
	month_of_birth = 1
	NOT = { month_of_birth = 2 }
}
is_born_in_february_trigger = {
	month_of_birth = 2
	NOT = { month_of_birth = 3 }
}
is_born_in_march_trigger = {
	month_of_birth = 3
	NOT = { month_of_birth = 4 }
}
is_born_in_april_trigger = {
	month_of_birth = 4
	NOT = { month_of_birth = 5 }
}
is_born_in_may_trigger = {
	month_of_birth = 5
	NOT = { month_of_birth = 6 }
}
is_born_in_june_trigger = {
	month_of_birth = 6
	NOT = { month_of_birth = 7 }
}
is_born_in_july_trigger = {
	month_of_birth = 7
	NOT = { month_of_birth = 8 }
}
is_born_in_august_trigger = {
	month_of_birth = 8
	NOT = { month_of_birth = 9 }
}
is_born_in_september_trigger = {
	month_of_birth = 9
	NOT = { month_of_birth = 10 }
}
is_born_in_october_trigger = {
	month_of_birth = 10
	NOT = { month_of_birth = 11 }
}
is_born_in_november_trigger = {
	month_of_birth = 11
	NOT = { month_of_birth = 12 }
}
is_born_in_december_trigger = {
	month_of_birth = 12
}

# Astrology triggers removed for Faerun

# has_unsafe_secret_religion - removed for Faerun

same_true_religion_as_from_trigger = {
	true_religion = FROM
}
same_true_religion_as_root_trigger = {
	true_religion = ROOT
}

has_dharmic_religion_trigger = {
	OR = {
		religion = adama
		religion = padhran
	}
}

sword_coast_way_trade_post_trigger = {
	custom_tooltip = {
		text = sword_coast_way_province_desc
		trade_route = sword_coast_way
		# OR = {
		# 	province_id = 17
		# 	province_id = 1
		# 	province_id = 74
		# 	province_id = 144
		# 	province_id = 425
		# 	province_id = 287
		# 	province_id = 441
		# 	province_id = 392
		# }
	}
}

black_road_trade_post_trigger = {
	custom_tooltip = {
		text = black_road_province_desc
		OR = {
			province_id = 285	# teshendale Trade post
			province_id = 1068	# bhaerlith Oasis
			province_id = 104	# llorkh Gold and Silver Mines
			province_id = 54	# loudwater Trade post
			province_id = 7	# secomber Trade post
			province_id = 3	# daggerford Trade post
		}
	}
}

sea_fallen_stars_route_trade_post_trigger = {
	custom_tooltip = {
		text = sea_fallen_stars_route_province_desc
		OR = {
			province_id = 1000 # telflamm Trade post
			province_id = 400 # lyrabar Trade post
			province_id = 262 # tantras Trade post
			province_id = 270 # mulmaster Trade post
			province_id = 266	# zhentil keep Trade post
			province_id = 256	# selgaunt Trade post
			province_id = 190	# westgate Trade post
			province_id = 249	# suzail Trade post
			province_id = 1024 # velprintalar Trade post
			province_id = 1056 # spandeliyon Trade post
			province_id = 680 # skuld Trade post
			province_id = 631 # mourktar Trade post
			province_id = 1040 # escalant Trade post
			province_id = 579 # cimbar Trade post
			province_id = 577 # hlath Trade post
			province_id = 210 # arrabar Trade post
			province_id = 238 # alaghon Trade post
			province_id = 191 # starmantle Trade post
		}
	}
}

silk_road_trade_post_trigger = {
	custom_tooltip = {
		text = silk_road_province_desc
		OR = {
			province_id = 1383 # Shou Kuan
			# province_id = 1310 Shihfang
			province_id = 1302 # Yenching
			# province_id = 815 Yellow Serpent
			province_id = 977 # Alashan
			# province_id = 896 Daynk
			province_id = 826 # Leopard Shan
			# province_id = 710 Naysabur
			province_id = 712 # Iliphanar
			province_id = 707 # Dhaztanar
		}
	}
}

golden_waters_trade_post_trigger = {
	custom_tooltip = {
		text = golden_waters_province_desc
		NOR = {
			province_id = 2171 # Sinna
			province_id = 1587 # Al-Abib
			province_id = 1548 # Marching Camels Road
			province_id = 1398 # Adhal
			province_id = 1557 # Magrib
			province_id = 1460 # Hayyir
			province_id = 1461 # Wasat
			province_id = 1468 # Saraq
			province_id = 1474 # Fahhas
			# province_id = 1471 # Hilm
			province_id = 1480 # Mahabba
			province_id = 949 # Umara
			province_id = 951 # Qadib
			province_id = 800 # Ship Isle
			province_id = 756 # Kolapur
			province_id = 798 # Darmesh
		}
	}
}

spice_road_trade_post_trigger = {
	custom_tooltip = {
		text = spice_road_province_desc
		OR = {
			# province_id = 1345 # Loulan
			province_id = 1343 # Chao Yang
			# province_id = 1314 Hulan
			province_id = 877 # Ansi
			province_id = 868 # Chan-Liu-Shui
			province_id = 905 # Kourmira
			province_id = 913 # Almorel
			# province_id = 914 # Beacon Cairn
			province_id = 841 # Citadel Rashemar
			province_id = 1015 # Mulsantir
			# province_id = 1007 Tezir
			province_id = 1006 # Two-Stars
			# province_id = 1002 Phent
			province_id = 1000 # Telflamm
		}
	}
}

proselytize_convert_independent_trigger = {
	owner = {
		OR = {
			FROM = { NOT = { religion_group = humanoid_group } }
			FROM = { has_religion_feature = religion_proselytizing }
		}
		independent = yes
		NOT = { religion = FROM }
		religion_group = humanoid_group
		OR = {
			NOT = { religion = toteteohuan }
			year = 1350
		}
		is_reformed_religion = no
		capital_scope = {
			province = ROOT
		}
		controls_religion = no
		FROM = {
			higher_tier_than = COUNT
			OR = {
				independent = yes
				higher_tier_than = DUKE
			}
		}
		NOT = {
			has_opinion_modifier = { who = FROM modifier = opinion_sent_preacher }
		}
		is_within_diplo_range = FROM
	}
}

has_tribal_or_nomadic_government_trigger = {
	custom_tooltip = {
		text = tribal_or_nomadic_government_tt
		hidden_trigger = {
			OR = {
				government = tribal_government
				government = nomadic_tribal_government
				government = nomadic_government
			}
		}
	}
}


has_minor_title_relating_to_martial_trigger = { #WIP - feel free to add to this
	OR = {
		has_minor_title = title_master_of_the_horse
		has_minor_title = title_cupbearer
		has_minor_title = title_commander
	}
}

ruler_has_dedicated_temple_trigger = {
	OR = {
		has_character_modifier = dedicated_to_zeus
		has_character_modifier = dedicated_to_poseidon
		has_character_modifier = dedicated_to_hades
		has_character_modifier = dedicated_to_hermes
		has_character_modifier = dedicated_to_demeter
		has_character_modifier = dedicated_to_athena
		has_character_modifier = dedicated_to_apollo
		has_character_modifier = dedicated_to_arthemis
		has_character_modifier = dedicated_to_ares
		has_character_modifier = dedicated_to_aphrodite
		has_character_modifier = dedicated_to_ephaestus
		has_character_modifier = dedicated_to_hestia
	}
}

can_build_hillfort_trigger = {
	OR = {
		AND = {
					NOR = {
						is_building = tb_hillfort_1
						has_building = tb_hillfort_1
					}
					location = { TECH_CASTLE_CONSTRUCTION = 0 }
		}
		AND = {
					has_building = tb_hillfort_1
					NOR = {
						is_building = tb_hillfort_2
						has_building = tb_hillfort_2
					}
					location = { TECH_CASTLE_CONSTRUCTION = 0 }
		}
		AND = {
					has_building = tb_hillfort_2
					NOR = {
						is_building = tb_hillfort_3
						has_building = tb_hillfort_3
					}
					location = { TECH_CASTLE_CONSTRUCTION = 1 }
		}
		AND = {
					has_building = tb_hillfort_3
					NOR = {
							is_building = tb_hillfort_4
							has_building = tb_hillfort_4
						}
					location = { TECH_CASTLE_CONSTRUCTION = 1 }
		}
	}
}
can_build_defensive_fortifications_trigger = {
	holding_type = tribal
	hidden_tooltip = {
		NOR = {
			is_building = tb_defensive_fortifications_4
			has_building = tb_defensive_fortifications_4
		}
	}
	OR = {
		AND = {
			custom_tooltip = {
				text = tooltip_can_build_tb_defensive_fortifications_1
				hidden_tooltip = {
					NOR = {
						is_building = tb_defensive_fortifications_1
						has_building = tb_defensive_fortifications_1
					}
					location = { TECH_CASTLE_CONSTRUCTION = 0 }
				}
			}
		}
		AND = {
			custom_tooltip = {
				text = tooltip_can_build_tb_defensive_fortifications_2
				hidden_tooltip = {
					has_building = tb_defensive_fortifications_1
					NOR = {
						is_building = tb_defensive_fortifications_2
						has_building = tb_defensive_fortifications_2
					}
					location = { TECH_CASTLE_CONSTRUCTION = 0 }
				}
			}
		}
		AND = {
			custom_tooltip = {
				text = tooltip_can_build_tb_defensive_fortifications_3
				hidden_tooltip = {
					has_building = tb_defensive_fortifications_2
					NOR = {
						is_building = tb_defensive_fortifications_3
						has_building = tb_defensive_fortifications_3
					}
					location = { TECH_CASTLE_CONSTRUCTION = 1 }
				}
			}
		}
		AND = {
			custom_tooltip = {
				text = tooltip_can_build_tb_defensive_fortifications_4
				hidden_tooltip = {
					has_building = tb_defensive_fortifications_3
					NOR = {
						is_building = tb_defensive_fortifications_4
						has_building = tb_defensive_fortifications_4
					}
					location = { TECH_CASTLE_CONSTRUCTION = 1 }
				}
			}
		}
	}
}
can_build_walls_trigger = {
	holding_type = castle
	hidden_tooltip = { NOT = { has_building = ca_wall_5 } }
	OR = {
		AND = {
			custom_tooltip = {
				text = tooltip_can_build_ca_wall_1
				hidden_tooltip = {
					NOR = {
						is_building = ca_wall_1
						has_building = ca_wall_1
					}
					location = { TECH_FORTIFICATIONS_CONSTRUCTION = 0 }
				}
			}
		}
		AND = {
			custom_tooltip = {
				text = tooltip_can_build_ca_wall_2
				hidden_tooltip = {
					has_building = ca_wall_1
					NOR = {
						is_building = ca_wall_2
						has_building = ca_wall_2
					}
					location = { TECH_FORTIFICATIONS_CONSTRUCTION = 2 }
				}
			}
		}
		AND = {
			custom_tooltip = {
				text = tooltip_can_build_ca_wall_3
				hidden_tooltip = {
					has_building = ca_wall_2
					NOR = {
						is_building = ca_wall_3
						has_building = ca_wall_3
					}
					location = { TECH_FORTIFICATIONS_CONSTRUCTION = 4 }
				}
			}
		}
		AND = {
			custom_tooltip = {
				text = tooltip_can_build_ca_wall_4
				hidden_tooltip = {
					has_building = ca_wall_3
					NOR = {
						is_building = ca_wall_4
						has_building = ca_wall_4
					}
					location = { TECH_FORTIFICATIONS_CONSTRUCTION = 6 }
				}
			}
		}
		AND = {
			custom_tooltip = {
				text = tooltip_can_build_ca_wall_5
				hidden_tooltip = {
					has_building = ca_wall_4
					NOR = {
						is_building = ca_wall_5
						has_building = ca_wall_5
					}
					location = { TECH_FORTIFICATIONS_CONSTRUCTION = 8 }
				}
			}
		}
	}
}
can_build_castle_fortifications_trigger = {
	holding_type = castle
	hidden_tooltip = {
		NOR = {
			is_building = ca_wall_q_5
			has_building = ca_wall_q_5
		}
	}
	OR = {
		AND = {
			custom_tooltip = {
				text = tooltip_can_build_ca_wall_q_1
				hidden_tooltip = {
					NOR = {
						is_building = ca_wall_q_1
						has_building = ca_wall_q_1
					}
					location = { TECH_FORTIFICATIONS_CONSTRUCTION = 0 }
				}
			}
		}
		AND = {
			custom_tooltip = {
				text = tooltip_can_build_ca_wall_q_2
				hidden_tooltip = {
					has_building = ca_wall_q_1
					NOR = {
						is_building = ca_wall_q_2
						has_building = ca_wall_q_2
					}
					location = { TECH_FORTIFICATIONS_CONSTRUCTION = 1 }
				}
			}
		}
		AND = {
			custom_tooltip = {
				text = tooltip_can_build_ca_wall_q_3
				hidden_tooltip = {
					has_building = ca_wall_q_2
					NOR = {
						is_building = ca_wall_q_3
						has_building = ca_wall_q_3
					}
					location = { TECH_FORTIFICATIONS_CONSTRUCTION = 3 }
				}
			}
		}
		AND = {
			custom_tooltip = {
				text = tooltip_can_build_ca_wall_q_4
				hidden_tooltip = {
					has_building = ca_wall_q_3
					NOR = {
						is_building = ca_wall_q_4
						has_building = ca_wall_q_4
					}
				}
			}
			location = { TECH_FORTIFICATIONS_CONSTRUCTION = 5 }
		}
		AND = {
			custom_tooltip = {
				text = tooltip_can_build_ca_wall_q_5
				hidden_tooltip = {
					has_building = ca_wall_q_4
					NOR = {
						is_building = ca_wall_q_5
						has_building = ca_wall_q_5
					}
					location = { TECH_FORTIFICATIONS_CONSTRUCTION = 7 }
				}
			}
		}
	}
}

is_inaccessible_or_incapable_trigger = {
	OR = {
		is_inaccessible_trigger = yes
		is_incapable = yes
		prisoner = yes
	}
}

is_mongol_empire_leader_trigger = {
	OR = {
		has_landed_title = e_yaimunnahar
		liege = { has_landed_title = e_yaimunnahar }
		top_liege = { has_landed_title = e_yaimunnahar }
	}
}

is_single_player_observer_mode = {
	multiplayer = no
	is_local_human_observer = yes
}

# Used to check if a character would have a regent if the game rule wasn't disabled
# Uses many separate 'trigger_if's for a nicer tooltip
# Expand with traits with any of the following flags:
# - incapacitating
# - pilgrimage
# - in_hiding
is_not_in_regency_trigger = {
	show_only_failed_conditions = yes

	trigger_if = {
		limit = {
			has_game_rule = {
				name = regencies
				value = on
			}
		}

		has_regent = no
	}

	trigger_if = {
		limit = {
			has_game_rule = {
				name = regencies
				value = off
			}
		}

		is_adult = yes
	}

	trigger_if = {
		limit = {
			has_game_rule = {
				name = regencies
				value = off
			}
		}

		prisoner = no
	}

	trigger_if = {
		limit = {
			has_game_rule = {
				name = regencies
				value = off
			}
		}

		is_incapable = no
	}

	trigger_if = {
		limit = {
			has_game_rule = {
				name = regencies
				value = off
			}
		}

		NOT = { trait = travelling }
	}

	trigger_if = {
		limit = {
			has_game_rule = {
				name = regencies
				value = off
			}
		}

		NOT = { trait = on_pilgrimage }
	}

	trigger_if = {
		limit = {
			has_game_rule = {
				name = regencies
				value = off
			}
		}

		NOT = { trait = troubled_pregnancy }
	}

	trigger_if = {
		limit = {
			has_game_rule = {
				name = regencies
				value = off
			}
		}

		NOT = { trait = pregnancy_finishing }
	}
}

# Use to check if any_demesne/realm_province is actually inside someone's realm
# instead of only holdings, but not the province itself
held_under_PREV = {
	owner = {
		OR = {
			character = PREVPREV
			is_vassal_or_below_of = PREVPREV
		}
	}
}
