# bhaalspawn_county_conquest
# bhaalspawn_county_reconquest
# great_align_conflict
# displacement

bhaalspawn_county_conquest = {
	name = CB_NAME_BHAALSPAWN_CONQUEST
	war_name = WAR_BHAALSPAWN_CONQUEST
	sprite = 27
	truce_days = 1825
	infamy_modifier = 2
	sort_priority = 700

	hostile_against_others = yes
	is_permanent = yes
	check_all_titles = yes # if permanent, setting this to true will check against all of someones titles, including vassal held titles
	press_claim = yes
	can_ask_to_join_war = no
	allowed_to_target_tributaries = yes

	can_use_gui = {
		ROOT = {
			show_scope_change = no
			war_cost = yes
		}
	}

	can_use = {
		ROOT = {
			trait = bhaalspawn

			NOR = {
				is_vassal_or_below_of = FROM
				mercenary = yes
				government = nomadic_tribal_government
				AND = {
					culture = sahuagin
					race_is_fish = yes
					is_conquest_religion = yes
				}
			}
		}

		FROM = {
			NOT = { trait = creature_monster }
		}
	}

	can_use_title = {
		real_tier = COUNT

		holder_scope = {
			OR = {
				character = FROM
				is_vassal_or_below_of = FROM
			}
		}

		OR = {
			# Special condition for seafaring coastal range.
			trigger_if = {
				limit = {
					ROOT = {
						is_seafaring_religion = yes
					}
				}

				location = {
					is_coastal = yes
					any_neighbor_province = { # bordering province
						trigger_if = {
							limit = { has_owner = yes }

							owner = { # part of attacker's realm
								OR = {
									character = ROOT
									is_vassal_or_below_of = ROOT
								}
							}
						}
						trigger_else = {
							is_land = no # first sea zone

							any_neighbor_province = {
								trigger_if = {
									limit = { has_owner = yes }

									owner = { # part of attacker's realm
										OR = {
											character = ROOT
											is_vassal_or_below_of = ROOT
										}
									}
								}
								trigger_else = {
									is_land = no # second sea zone

									any_neighbor_province = {
										owner = { # part of attacker's realm
											OR = {
												character = ROOT
												is_vassal_or_below_of = ROOT
											}
										}
									}
								}
							}
						}
					}
				}
			}

			# Only bordering counties
			location = {
				any_neighbor_province = {
					owner = {
						OR = {
							character = ROOT
							is_vassal_or_below_of = ROOT
						}
					}
				}
			}
		}
	}

	is_valid_title = {
		holder_scope = {
			OR = {
				character = FROM
				is_vassal_or_below_of = FROM
			}
		}
	}

	on_add = {
		attacker = {
			show_scope_change = no
			declare_war_effect = yes
		}
	}

	on_success_title = {
		if = { # Vassalise one county counts
			limit = {
				holder_scope = {
					real_tier = COUNT
					num_of_count_titles == 1
					lower_real_tier_than = attacker
					is_patrician = no
				}
			}

			holder_scope = {
				show_scope_change = no

				set_defacto_liege = ROOT
			}
		}

		else = { # Usurp title under other circumstances
			usurp_title_plus_barony_if_unlanded = {
				target = attacker
				type = invasion
			}

			any_de_jure_vassal_title = { # take all baronies under the one we're fighting for
				show_scope_change = no

				limit = {
					NOT = { de_facto_liege = PREV }

					holder_scope = {
						OR = {
							character = defender
							is_vassal_or_below_of = defender
						}
					}
				}

				usurp_title_plus_barony_if_unlanded = {
					target = attacker
					type = invasion
				}
			}
		}

		attacker = {
			show_scope_change = no

			participation_scaled_prestige = 100
			attacker_victory_effect = yes
		}

		any_attacker = {
			limit = { NOT = { character = attacker } }
			hidden_effect = { participation_scaled_prestige = 100 }
		}

		# To handle Warrior Lodge mission "Wage War" completion...
		attacker = { save_event_target_as = attacker_target }
		defender = { save_event_target_as = defender_target }

		if = {
			limit = {
				event_target:attacker_target = { has_quest = quest_warrior_lodge_war }
				is_quest_target_of = event_target:attacker_target
			}

			event_target:attacker_target = {
				show_scope_change = no

				tooltip = {
					clr_quest = quest_warrior_lodge_war
				}

				set_character_flag = won_war@event_target:defender_target

				# Handled by on_action event from here
			}
		}
	}

	on_fail_title = {
		attacker = {
			show_scope_change = no

			prestige = -100
		}

		defender = {
			show_scope_change = no

			participation_scaled_prestige = 50
		}

		any_defender = {
			limit = { NOT = { character = defender } }
			hidden_effect = { participation_scaled_prestige = 50 }
		}

		# To handle Warrior Lodge mission "Wage War" completion...
		attacker = { save_event_target_as = attacker_target }
		defender = { save_event_target_as = defender_target }

		if = {
			limit = {
				event_target:attacker_target = { has_quest = quest_warrior_lodge_war }
				is_quest_target_of = event_target:attacker_target
			}

			event_target:attacker_target = {
				show_scope_change = no

				tooltip = {
					clr_quest = quest_warrior_lodge_war
				}

				set_character_flag = white_peace@event_target:defender_target

				# Handled by on_action event from here
			}
		}
	}

	on_reverse_demand = {
		attacker = {
			show_scope_change = no

			prestige = -200

			transfer_scaled_wealth = {
				to = defender
				value = 4.0
			}
		}

		defender = {
			show_scope_change = no

			participation_scaled_prestige = 100
			defender_victory_effect = yes
		}

		any_defender = {
			limit = { NOT = { character = defender } }
			hidden_effect = { participation_scaled_prestige = 100 }
		}
	}

	on_reverse_demand_title = {
		# To handle Warrior Lodge mission "Wage War" completion...
		attacker = { save_event_target_as = attacker_target }
		defender = { save_event_target_as = defender_target }

		if = {
			limit = {
				event_target:attacker_target = { has_quest = quest_warrior_lodge_war }
				is_quest_target_of = event_target:attacker_target
			}

			event_target:attacker_target = {
				show_scope_change = no

				tooltip = {
					clr_quest = quest_warrior_lodge_war
				}

				set_character_flag = lost_war@event_target:defender_target

				# Handled by on_action event from here
			}
		}
	}

	attacker_ai_victory_worth = {
		factor = -1 # always accept
	}

	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}

	defender_ai_defeat_worth = {
		factor = 100
	}

	ai_will_do = {
		factor = 1

		mult_modifier = {
			factor = 0.2
			ROOT = {
				trait = slothful
			}
		}
		mult_modifier = {
			factor = 3
			ROOT = {
				trait = impaler
			}
		}
		mult_modifier = {
			factor = 3
			ROOT = {
				trait = cruel
			}
		}
		mult_modifier = {
			factor = 2
			ROOT = {
				trait = deceitful
			}
		}
		mult_modifier = {
			factor = 0.2
			ROOT = {
				trait = kind
			}
		}
		mult_modifier = {
			factor = 0.9
			ROOT = {
				trait = just
			}
		}
		mult_modifier = {
			factor = 3
			ROOT = {
				trait = brave
			}
		}
		mult_modifier = {
			factor = 4
			ROOT = {
				trait = ambitious
			}
		}
		mult_modifier = {
			factor = 4
			ROOT = {
				trait = zealous
			}
		}
	}
}

bhaalspawn_county_reconquest = {
	name = CB_NAME_BHAALSPAWN_RECONQUEST
	war_name = WAR_BHAALSPAWN_RECONQUEST
	sprite = 33
	truce_days = 1825
	infamy_modifier = 0.5
	sort_priority = 700

	hostile_against_others = yes
	is_permanent = yes
	check_all_titles = yes # if permanent, setting this to true will check against all of someones titles, including vassal held titles
	press_claim = yes
	can_ask_to_join_war = no
	allowed_to_target_tributaries = yes

	can_use_gui = {
		ROOT = {
			show_scope_change = no
			war_cost = yes
		}
	}

	can_use = {
		ROOT = {
			NOR = {
				is_vassal_or_below_of = FROM
				government = nomadic_tribal_government
				mercenary = yes
				trait = bhaalspawn
				trait = creature_monster
			}
		}

		FROM = {
			trait = bhaalspawn
			NOT = { culture = monster }
		}
	}

	can_use_title = {
		real_tier = COUNT

		holder_scope = {
			OR = {
				character = FROM
				is_vassal_or_below_of = FROM
			}
		}

		OR = {
			# Special condition for seafaring coastal range.
			trigger_if = {
				limit = {
					ROOT = {
						is_seafaring_religion = yes
					}
				}

				location = {
					is_coastal = yes
					any_neighbor_province = { # bordering province
						trigger_if = {
							limit = { has_owner = yes }

							owner = { # part of attacker's realm
								OR = {
									character = ROOT
									is_vassal_or_below_of = ROOT
								}
							}
						}
						trigger_else = {
							is_land = no # first sea zone

							any_neighbor_province = {
								trigger_if = {
									limit = { has_owner = yes }

									owner = { # part of attacker's realm
										OR = {
											character = ROOT
											is_vassal_or_below_of = ROOT
										}
									}
								}
								trigger_else = {
									is_land = no # second sea zone

									any_neighbor_province = {
										owner = { # part of attacker's realm
											OR = {
												character = ROOT
												is_vassal_or_below_of = ROOT
											}
										}
									}
								}
							}
						}
					}
				}
			}

			# Only bordering counties
			location = {
				any_neighbor_province = {
					owner = {
						OR = {
							character = ROOT
							is_vassal_or_below_of = ROOT
						}
					}
				}
			}
		}
	}

	is_valid_title = {
		holder_scope = {
			OR = {
				character = FROM
				is_vassal_or_below_of = FROM
			}
		}
	}

	on_add = {
		attacker = {
			show_scope_change = no
			declare_war_effect = yes
		}
	}

	on_success_title = {
		holder_scope = {
			any_courtier = {
				limit = {
					trait = bhaalspawn
					NOT = { higher_tier_than = BARON }
				}
				imprison = attacker
			}
			if = {
				limit = {
					trait = bhaalspawn
				}
				imprison = attacker
			}
		}

		if = { # Vassalise one county counts
			limit = {
				holder_scope = {
					real_tier = COUNT
					num_of_count_titles == 1
					lower_real_tier_than = attacker
					is_patrician = no
				}
			}

			holder_scope = {
				show_scope_change = no

				set_defacto_liege = ROOT
			}
		}

		else = { # Usurp title under other circumstances
			usurp_title_plus_barony_if_unlanded = {
				target = attacker
				type = invasion
			}

			any_de_jure_vassal_title = { # take all baronies under the one we're fighting for
				show_scope_change = no

				limit = {
					NOT = { de_facto_liege = PREV }

					holder_scope = {
						OR = {
							character = defender
							is_vassal_or_below_of = defender
						}
					}
				}

				usurp_title_plus_barony_if_unlanded = {
					target = attacker
					type = invasion
				}
			}
		}

		attacker = {
			show_scope_change = no

			participation_scaled_prestige = 100
			attacker_victory_effect = yes
		}

		any_attacker = {
			limit = { NOT = { character = attacker } }
			hidden_effect = { participation_scaled_prestige = 100 }
		}

		# To handle Warrior Lodge mission "Wage War" completion...
		attacker = { save_event_target_as = attacker_target }
		defender = { save_event_target_as = defender_target }

		if = {
			limit = {
				event_target:attacker_target = { has_quest = quest_warrior_lodge_war }
				is_quest_target_of = event_target:attacker_target
			}

			event_target:attacker_target = {
				show_scope_change = no

				tooltip = {
					clr_quest = quest_warrior_lodge_war
				}

				set_character_flag = won_war@event_target:defender_target

				# Handled by on_action event from here
			}
		}
	}

	on_fail_title = {
		attacker = {
			show_scope_change = no

			prestige = -100
		}

		defender = {
			show_scope_change = no

			participation_scaled_prestige = 50
		}

		any_defender = {
			limit = { NOT = { character = defender } }
			hidden_effect = { participation_scaled_prestige = 50 }
		}

		# To handle Warrior Lodge mission "Wage War" completion...
		attacker = { save_event_target_as = attacker_target }
		defender = { save_event_target_as = defender_target }

		if = {
			limit = {
				event_target:attacker_target = { has_quest = quest_warrior_lodge_war }
				is_quest_target_of = event_target:attacker_target
			}

			event_target:attacker_target = {
				show_scope_change = no

				tooltip = {
					clr_quest = quest_warrior_lodge_war
				}

				set_character_flag = white_peace@event_target:defender_target

				# Handled by on_action event from here
			}
		}
	}

	on_reverse_demand = {
		attacker = {
			show_scope_change = no

			prestige = -200

			transfer_scaled_wealth = {
				to = defender
				value = 4.0
			}
		}

		defender = {
			show_scope_change = no

			participation_scaled_prestige = 100
			defender_victory_effect = yes
		}

		any_defender = {
			limit = { NOT = { character = defender } }
			hidden_effect = { participation_scaled_prestige = 100 }
		}
	}

	on_reverse_demand_title = {
		# To handle Warrior Lodge mission "Wage War" completion...
		attacker = { save_event_target_as = attacker_target }
		defender = { save_event_target_as = defender_target }

		if = {
			limit = {
				event_target:attacker_target = { has_quest = quest_warrior_lodge_war }
				is_quest_target_of = event_target:attacker_target
			}

			event_target:attacker_target = {
				show_scope_change = no

				tooltip = {
					clr_quest = quest_warrior_lodge_war
				}

				set_character_flag = lost_war@event_target:defender_target

				# Handled by on_action event from here
			}
		}
	}

	attacker_ai_victory_worth = {
		factor = -1 # always accept
	}

	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}

	defender_ai_defeat_worth = {
		factor = 100
	}

	ai_will_do = {
		factor = 1.5
	}
}

great_align_conflict = {
	name = CB_NAME_GREAT_ALIGN_CONFLICT
	war_name = WAR_NAME_GREAT_ALIGN_CONFLICT
	sprite = 23
	truce_days = 3650
	sort_priority = 2000

	is_holy_war = yes
	battle_warscore_mult = 0.5
	max_defender_occupation_score = 85

	on_add = {
		attacker = {
			show_scope_change = no
			declare_war_effect = yes
		}
	}

	on_success = {
		attacker = {
			show_scope_change = no

			prestige = 400
			piety = 200
			participation_scaled_prestige = 200
			participation_scaled_piety = 100
			attacker_victory_effect = yes

			occupy_minors_of_occupied_settlements = FROM
			gain_all_occupied_titles = {
				who = FROM
				type = invasion
			}

			if = {
				limit = {
					can_apply_cool_nickname_trigger = yes
				}
				random_list = {
					10 = { give_nickname = nick_the_conqueror }
					10 = { give_nickname = nick_the_victorious }
					10 = { give_nickname = nick_the_memorable }
				}
			}
		}

		any_attacker = {
			limit = { NOT = { character = attacker } }
			hidden_effect = {
				participation_scaled_prestige = 400
				participation_scaled_piety = 200
			}
		}

		defender = {
			show_scope_change = no

			prestige = -200
			piety = -100

			if = { # reset crown authority to minimum
				limit = { NOT = { has_dlc = "Conclave" } }

				any_demesne_title = {
					limit = { is_crown_law_title = yes }
					add_law = crown_authority_0
				}
			}

			primary_title = {
				show_scope_change = no

				holder_scope = {
					show_scope_change = no

					any_demesne_title = { # eligible duke and king tier titles usurped
						show_scope_change = no

						limit = {
							higher_real_tier_than = COUNT
							NOT = { real_tier = PREVPREV }
						}

						usurp_title_plus_barony_if_unlanded = {
							target = attacker
							type = invasion
						}
					}

					if = {
						limit = {
							attacker = { has_character_flag = chaotic_invader }
							defender = {
								NOT = {
									any_demesne_title = {
										title = e_shou_lung_west_governor
									}
								}
							}
						}
						any_demesne_title = {
							show_scope_change = no
							limit = {
								real_tier = PREVPREV
								trigger_if = {
									limit = { controls_religion = yes }
									OR = { #religious head titles we don't mind to see destroyed
										title = d_muhjari
										title = d_myriadic
										title = d_qisma
										title = d_pantheist
										title = k_black_altar
									}
								}
								is_zulkirate = no
							}
							unsafe_destroy_landed_title = THIS
						}
					}
					else_if = {
						limit = {
							defender = {
								NOT = {
									any_demesne_title = {
										title = e_shou_lung_west_governor
									}
								}
							}
						}
						any_demesne_title = {
							show_scope_change = no
							limit = {
								real_tier = PREVPREV
								NOR = {
									controls_religion = yes
									is_zulkirate = yes
								}
							}
							usurp_title = {
								target = attacker
								type = invasion
							}
						}
					}
					else = {
						any_demesne_title = {
							show_scope_change = no
							limit = {
								real_tier = PREVPREV
								NOR = {
									controls_religion = yes
									is_zulkirate = yes
								}
							}
							usurp_title = {
								target = attacker
								type = invasion
							}
						}
						attacker = {
							hidden_effect = {
								create_title = {
									tier = EMPEROR
									landless = no
									temporary = no
									custom_created = yes
									culture = ROOT
									holder = ROOT
									base_title = e_shou_lung_west_governor
									name = WESTERN_SHOU
								}
								new_title = {
									add_law = {
										law = succ_primogeniture
										cooldown = no
										opinion_effect = no
									}
								}
							}
						}
						create_character = {
							culture = wang
							religion = the_path
							trait = creature_human
							random_traits = yes
							age = 35
						}
						new_character = {
							grant_title = e_shou_lung_west_governor
						}
					}
				}
			}

			set_defacto_liege = ROOT
		}

		attacker = {
			show_scope_change = no
			if = {
				limit = {
					independent = no
				}
				set_defacto_liege = THIS
			}

			hidden_effect = {
				disband_event_forces = decadence_revolters
			}

			roman_victory_triumph_effect = yes
		}
	}

	on_fail = {
		attacker = {
			show_scope_change = no

			prestige = -200

			hidden_effect = {
				disband_event_forces = decadence_revolters
				if = {
					limit = {
						OR = {
							is_landed = no
							independent = no
						}
					}
					death = { death_reason = death_planes }
				}
			}
		}

		defender = {
			show_scope_change = no

			prestige = 200
			participation_scaled_prestige = 200
		}

		any_defender = {
			limit = { NOT = { character = defender } }
			hidden_effect = { participation_scaled_prestige = 100 }
		}
	}

	on_reverse_demand = {
		attacker = {
			show_scope_change = no

			prestige = -200
			piety = -100
			set_defacto_liege = FROM

			transfer_scaled_wealth = {
				to = defender
				value = 8.0
			}

			hidden_effect = {
				disband_event_forces = decadence_revolters
				if = {
					limit = {
						OR = {
							is_landed = no
							independent = no
						}
					}
					death = { death_reason = death_planes }
				}
			}
		}

		defender = {
			show_scope_change = no

			prestige = 400
			piety = 200
			defender_victory_effect = yes

			roman_victory_triumph_effect = yes
		}
	}

	on_reverse_demand_title = {
		attacker = {
			show_scope_change = no
			remove_claim = PREV
		}
	}

	attacker_ai_victory_worth = {
		factor = 100
	}

	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}

	defender_ai_defeat_worth = {
		factor = 150
	}
}

displacement = {
	name = CB_NAME_INVASION
	war_name = WAR_NAME_INVASION
	sprite = 7
	truce_days = 3650
	sort_priority = 2000

	hostile_against_others = yes
	can_ask_to_join_war = no
	allowed_to_target_tributaries = no

	can_use_gui = {
		ROOT = {
			show_scope_change = no
			war_cost = yes
		}
	}

	can_use = {
		ROOT = {
			mercenary = no
		}
	}

	can_use_title = {
		holder_scope = {
			OR = {
				character = FROM
				is_vassal_or_below_of = FROM
			}
		}
	}

	is_valid_title = {
		holder_scope = {
			OR = {
				character = FROM
				is_vassal_or_below_of = FROM
			}
		}
	}

	on_add = {
		attacker = {
			show_scope_change = no
			declare_war_effect = yes 
		}
	}

	on_success = {
		attacker = {
			show_scope_change = no

			prestige = 200
			participation_scaled_prestige = 200
			attacker_victory_effect = yes
		}

		any_attacker = {
			limit = { NOT = { character = attacker } }
			hidden_effect = { participation_scaled_prestige = 200 }
		}

		defender = {
			show_scope_change = no

			prestige = -200
		}

		hidden_effect = {
			defender = {
				any_vassal = {
					set_character_flag = preserve_vassal_structure_@attacker
				}
			}

			attacker = {
				occupy_minors_of_occupied_settlements = FROM
				gain_all_occupied_titles = FROM

				if = {
					limit = { 
						can_apply_average_nickname_trigger = yes
					}

					random_list = {
						10 = { give_nickname = nick_the_great }
						10 = { give_nickname = nick_the_victorious }
						10 = { give_nickname = nick_the_bold }
						10 = { give_nickname = nick_the_conqueror }
						10 = { give_nickname = nick_the_foehammer }
						10 = { give_nickname = nick_the_fell }
						10 = { give_nickname = nick_the_triumphant }
						5 = { give_nickname = nick_the_unyielding }
					}
				}

				roman_victory_triumph_effect = yes
			}
		}
	}

	on_success_title = {
		log = "[Root.GetBestName] (ID: [Root.GetID]) succeeded with [Root.GetHerHis] Invasion CB of [This.GetFullName] against [From.GetBestName] (ID: [From.GetID])"
		
		location = {
			reduce_province_to_tribal = yes
		}

		custom_tooltip = {
			text = invasion_succ_tip

			usurp_title_plus_barony_if_unlanded = {
				target = attacker
				type = invasion
			}

			defender = {
				set_defacto_liege = ROOT

				if = {
					limit = { is_vassal_or_below_of = attacker }
					imprison = attacker
				}
			}

			any_independent_ruler = {
				limit = { has_character_flag = preserve_vassal_structure_@attacker }

				set_defacto_liege = ROOT
				clr_character_flag = preserve_vassal_structure_@attacker
			}

			if = {
				limit = {
					higher_real_tier_than = BARON
					NOT = { culture = ROOT }
				}

				conquest_culture = attacker
			}
			if = {
				limit = {
					higher_real_tier_than = BARON
					NOT = { religion = ROOT }
				}

				religion = ROOT
			}
		}
	}

	on_fail = {
		attacker = {
			show_scope_change = no

			prestige = -200
		}

		defender = {
			show_scope_change = no

			prestige = 100
			participation_scaled_prestige = 100
		}

		any_defender = {
			limit = { NOT = { character = defender } }
			hidden_effect = { participation_scaled_prestige = 100 }
		}
	}

	on_reverse_demand = {
		attacker = {
			show_scope_change = no

			prestige = -200

			transfer_scaled_wealth = {
				to = defender
				value = 8.0
			}
		}

		defender = {
			show_scope_change = no

			prestige = 200
			participation_scaled_prestige = 200
			defender_victory_effect = yes
			roman_victory_triumph_effect = yes
		}

		any_defender = {
			limit = { NOT = { character = defender } }
			hidden_effect = { participation_scaled_prestige = 200 }
		}
	}

	on_reverse_demand_title = {
		attacker = {
			show_scope_change = no

			remove_claim = PREV
		}
	}

	on_attacker_leader_death = {
		any_defender = {
			letter_event = { id = 251 } # Our enemy has died, the war has ended
		}

		end_war = whitepeace
	}

	attacker_ai_victory_worth = {
		factor = 150
	}

	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}

	defender_ai_defeat_worth = {
		factor = 100
	}
}