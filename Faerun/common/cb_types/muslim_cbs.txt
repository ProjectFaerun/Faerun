# muslim_county_conquest
# muslim_invasion
# cb_decadence_usurption
# caliphal_subjugation
# decadence_invasion
# shia_caliphate_rising

muslim_county_conquest = {
	name = CB_NAME_COUNTY_CONQUEST
	war_name = WAR_NAME_COUNTY_CONQUEST
	sprite = 27
	truce_days = 1825
	sort_priority = 700

	hostile_against_others = yes
	is_permanent = yes
	check_all_titles = yes # if permanent, setting this to true will check against all of someones titles, including vassal held titles
	can_ask_to_join_war = no
	allowed_to_target_tributaries = no

	can_use_gui = {
		# Attacker
		ROOT = {
			trigger_if = {
				limit = { religion = martial_faith }
				piety >= 35
			}
			trigger_else = {
				piety >= 50
			}
		}
	}

	can_use = {
		# Attacker
		ROOT = {
			is_conquest_religion = yes

			NOR = {
				is_vassal_or_below_of = FROM
				government = nomadic_tribal_government # Use the 'pagan_county_conquest' CB instead
				mercenary = yes
				AND = {
					culture = sahuagin
					race_is_fish = yes
				}
				AND = {
					is_undead = yes
					OR = {
						has_character_flag = undead_court
						has_character_flag = vampire_court
					}
					FROM = { is_undead = no }
				}
				trait = bhaalspawn
				trait = creature_monster
			}
		}

		FROM = {
			NOR = {
				trait = bhaalspawn
				trait = creature_monster
			}
		}
	}

	can_use_title = {
		real_tier = COUNT

		holder_scope = {
			OR = {
				character = FROM
				is_vassal_or_below_of = FROM
			}
		}

		OR = {
			# Special condition for seafaring coastal range.
			trigger_if = {
				limit = {
					ROOT = {
						is_seafaring_religion = yes
					}
				}

				location = {
					is_coastal = yes
					any_neighbor_province = { # bordering province
						trigger_if = {
							limit = { has_owner = yes }

							owner = { # part of attacker's realm
								OR = {
									character = ROOT
									is_vassal_or_below_of = ROOT
								}
							}
						}
						trigger_else = {
							is_land = no # first sea zone

							any_neighbor_province = {
								trigger_if = {
									limit = { has_owner = yes }

									owner = { # part of attacker's realm
										OR = {
											character = ROOT
											is_vassal_or_below_of = ROOT
										}
									}
								}
								trigger_else = {
									is_land = no # second sea zone

									any_neighbor_province = {
										owner = { # part of attacker's realm
											OR = {
												character = ROOT
												is_vassal_or_below_of = ROOT
											}
										}
									}
								}
							}
						}
					}
				}
			}

			# Only bordering counties
			location = {
				any_neighbor_province = {
					owner = {
						OR = {
							character = ROOT
							is_vassal_or_below_of = ROOT
						}
					}
				}
			}
		}
	}

	is_valid_title = {
		holder_scope = {
			OR = {
				character = FROM
				is_vassal_or_below_of = FROM
			}
		}
	}

	on_add = {
		attacker = {
			show_scope_change = no

			if = {
				limit = { religion = martial_faith }
				piety = -35
			}
			else = {
				piety = -50
			}

			declare_war_effect = yes
		}
	}

	on_success_title = {
		if = { # Vassalise one county counts
			limit = {
				holder_scope = {
					real_tier = COUNT
					num_of_count_titles == 1
					lower_real_tier_than = attacker
					is_patrician = no
				}
			}

			holder_scope = {
				show_scope_change = no

				set_defacto_liege = ROOT
			}
		}

		else = { # Usurp title under other circumstances
			usurp_title_plus_barony_if_unlanded = {
				target = attacker
				type = invasion
			}

			any_de_jure_vassal_title = { # take all baronies under the one we're fighting for
				show_scope_change = no

				limit = {
					NOT = { de_facto_liege = PREV }

					holder_scope = {
						OR = {
							character = defender
							is_vassal_or_below_of = defender
						}
					}
				}

				usurp_title_plus_barony_if_unlanded = {
					target = attacker
					type = invasion
				}
			}
		}

		attacker = {
			show_scope_change = no

			participation_scaled_prestige = 100
			attacker_victory_effect = yes
		}

		any_attacker = {
			limit = { NOT = { character = attacker } }
			hidden_effect = { participation_scaled_prestige = 100 }
		}

		# To handle Warrior Lodge mission "Wage War" completion...
		attacker = { save_event_target_as = attacker_target }
		defender = { save_event_target_as = defender_target }

		if = {
			limit = {
				event_target:attacker_target = { has_quest = quest_warrior_lodge_war }
				is_quest_target_of = event_target:attacker_target
			}

			event_target:attacker_target = {
				show_scope_change = no

				tooltip = {
					clr_quest = quest_warrior_lodge_war
				}

				set_character_flag = won_war@event_target:defender_target

				# Handled by on_action event from here
			}
		}
	}

	on_fail_title = {
		attacker = {
			show_scope_change = no

			prestige = -100
		}

		defender = {
			show_scope_change = no

			participation_scaled_prestige = 50
		}

		any_defender = {
			limit = { NOT = { character = defender } }
			hidden_effect = { participation_scaled_prestige = 50 }
		}

		# To handle Warrior Lodge mission "Wage War" completion...
		attacker = { save_event_target_as = attacker_target }
		defender = { save_event_target_as = defender_target }

		if = {
			limit = {
				event_target:attacker_target = { has_quest = quest_warrior_lodge_war }
				is_quest_target_of = event_target:attacker_target
			}

			event_target:attacker_target = {
				show_scope_change = no

				tooltip = {
					clr_quest = quest_warrior_lodge_war
				}

				set_character_flag = white_peace@event_target:defender_target

				# Handled by on_action event from here
			}
		}
	}

	on_reverse_demand = {
		attacker = {
			show_scope_change = no

			prestige = -200

			transfer_scaled_wealth = {
				to = defender
				value = 4.0
			}
		}

		defender = {
			show_scope_change = no

			participation_scaled_prestige = 100
			defender_victory_effect = yes
		}

		any_defender = {
			limit = { NOT = { character = defender } }
			hidden_effect = { participation_scaled_prestige = 100 }
		}
	}

	on_reverse_demand_title = {
		# To handle Warrior Lodge mission "Wage War" completion...
		attacker = { save_event_target_as = attacker_target }
		defender = { save_event_target_as = defender_target }

		if = {
			limit = {
				event_target:attacker_target = { has_quest = quest_warrior_lodge_war }
				is_quest_target_of = event_target:attacker_target
			}

			event_target:attacker_target = {
				show_scope_change = no

				tooltip = {
					clr_quest = quest_warrior_lodge_war
				}

				set_character_flag = lost_war@event_target:defender_target

				# Handled by on_action event from here
			}
		}
	}

	attacker_ai_victory_worth = {
		factor = -1 # always accept
	}

	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}

	defender_ai_defeat_worth = {
		factor = 100
	}

	ai_will_do = {
		factor = 0.9 # Prefer using CB's without on_add costs
	}
}

# muslim_invasion
# cb_decadence_usurption

# Caliphs can subjugate people of their own religion
# caliphal_subjugation

decadence_invasion = {
	name = CB_NAME_INVASION
	war_name = WAR_NAME_DEC_INVASION
	sprite = 7
	truce_days = 3650

	hostile_against_others = yes
	can_ask_to_join_war = no

	can_use = {
		# Attacker
		ROOT = {
			has_character_flag = decadence_invader
		}
	}

	on_add = {
		attacker = {
			show_scope_change = no
			declare_war_effect = yes
		}
	}

	on_success = {
		# Attackers
		attacker = {
			show_scope_change = no

			prestige = 200
			piety = 100
			occupy_minors_of_occupied_settlements = FROM

			gain_all_occupied_titles = {
				who = FROM
				type = revolt
			}

			if = {
				limit = { 
					can_apply_cool_nickname_trigger = yes
				}
				random_list = {
					10 = { give_nickname = nick_the_conqueror }
					10 = { give_nickname = nick_the_victorious }
					10 = { give_nickname = nick_the_shining }
					5 = { give_nickname = nick_of_the_righteous_arm }
				}
			}
			participation_scaled_prestige = 200
			participation_scaled_piety = 100
			attacker_victory_effect = yes

			hidden_effect = {
				disband_event_forces = decadence_revolters
			}
		}

		any_attacker = {
			limit = { NOT = { character = attacker } }

			hidden_effect = {
				participation_scaled_prestige = 200
				participation_scaled_piety = 100
			}
		}

		# Defender
		defender = {
			show_scope_change = no

			prestige = -200

			if = { # reset crown authority to minimum
				limit = { NOT = { has_dlc = "Conclave" } }

				any_demesne_title = {
					limit = { is_crown_law_title = yes }
					add_law = crown_authority_0
				}
			}

			primary_title = {
				show_scope_change = no

				holder_scope = {
					show_scope_change = no

					any_demesne_title = { # eligible duke and king tier titles usurped
						show_scope_change = no

						limit = {
							higher_real_tier_than = COUNT
							NOT = { real_tier = PREVPREV }
						}

						usurp_title_plus_barony_if_unlanded = {
							target = attacker
							type = revolt
						}

						hidden_effect = {
							if = {
								limit = {
									NOT = { culture = ROOT }
								}

								conquest_culture = ROOT
							}
						}
					}

					any_demesne_title = { # top titles destroyed
						show_scope_change = no

						limit = { real_tier = PREVPREV }

						destroy_landed_title = THIS
					}
				}
			}

			set_defacto_liege = ROOT
			imprison = ROOT

			hidden_effect = {
				if = {
					limit = { has_nickname = no }

					random_list = {
						10 = { give_nickname = nick_the_decadent }
						10 = { give_nickname = nick_the_unready }
						10 = { give_nickname = nick_the_ill_ruler }
						10 = { give_nickname = nick_the_careless }
						10 = { give_nickname = nick_the_feckless }
						10 = { give_nickname = nick_the_squanderer }
						5 = { give_nickname = nick_the_oaf }
						5 = { give_nickname = nick_the_bad }
					}
				}

			}
		}

		hidden_effect = {
			any_player = { # Inform human players
				limit = {
					NOR = {
						character = defender
						dynasty = FROM
						is_vassal_or_below_of = defender
					}

					trigger_if = {
						limit = { # Don't bother with insignificant overthrowals
							defender = { higher_real_tier_than = DUKE }
						}

						# Unless the player borders them
						any_realm_province = {
							held_under_PREV = yes

							any_neighbor_province = {
								owner = {
									any_liege = {
										character = defender
									}
								}
							}
						}
					}
				}

				narrative_event = {
					id = 91241 # The ruling dynasty has been overthrown by ...
				}
			}
		}
	}

	on_fail = {
		attacker = {
			show_scope_change = no

			prestige = -200
			hidden_effect = { disband_event_forces = decadence_revolters }
		}

		defender = {
			show_scope_change = no

			prestige = 100
			participation_scaled_prestige = 100
		}

		any_defender = {
			limit = { NOT = { character = defender } }
			hidden_effect = { participation_scaled_prestige = 100 }
		}
	}

	on_reverse_demand = {
		attacker = {
			show_scope_change = no

			prestige = -200
			set_defacto_liege = FROM
			imprison = defender

			transfer_scaled_wealth = {
				to = defender
				value = 8.0
			}

			hidden_effect = { disband_event_forces = decadence_revolters }
		}

		defender = {
			show_scope_change = no

			prestige = 200
			defender_victory_effect = yes
		}
	}

	on_reverse_demand_title = {
		attacker = {
			show_scope_change = no

			remove_claim = PREV
		}
	}

	attacker_ai_victory_worth = {
		factor = 100
	}

	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}

	defender_ai_defeat_worth = {
		factor = 150
	}
}

# The special CB for the Rise of the Shi'a Caliphate
# shia_caliphate_rising