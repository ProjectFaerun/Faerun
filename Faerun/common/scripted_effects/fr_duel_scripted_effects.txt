
# Adapted from Holy Fury Claim Duel
# Nomad Duel for Leadership effects
apply_nomad_leadership_duel_defeat_effect = { 
	if = { 
		limit = { event_target:combatant_1 = { has_character_flag = nomadrule_duel@event_target:combatant_2 } }
		if = {  # if you are the *attacker* ...
			limit = { event_target:combatant_1 = { character = PREV } }
			if = {
				limit = {
					OR = { # and you *won*...
						has_character_flag = is_victorious_attacker
						has_character_flag = is_victorious_defender
					}
				}
				if = {
					limit = {
						event_target:combatant_2 = { is_landed = no }
						dynasty = event_target:combatant_2
						OR = {
							is_child_of = event_target:combatant_2
							sibling = event_target:combatant_2
							is_parent_of = event_target:combatant_2
						}
					}
					event_target:combatant_2 = {
						any_demesne_title = {
							grant_title = {
							target = event_target:combatant_1
							type = duel
							}
						}
					}
					event_target:combatant_1 = {
						if = {
							limit = { is_nomadic_tribal_culture = no }
							culture = event_target:combatant_2
						}
						set_government_type = nomadic_tribal_government
						character_event = { id = nomadtribalmaint.2 }
						character_event = { id = nomadtribalmaint.11 }
						character_event = { id = nomadtribalmaint.13 }
					}
				}
				else = {
					event_target:combatant_1 = {
						if = {
							limit = {
								OR = {
									is_landed = no
									AND = {
										lower_tier_than = ROOT
										is_tribal = yes
										NOT = { same_realm = ROOT }
									}
								}
							}
							set_character_flag = needs_nomad_conversion
						}
					}
					event_target:target_title = {
						grant_title = {
						target = event_target:combatant_1
						type = duel
						}
					}
					event_target:combatant_1 = {
						if = {
							limit = {
								has_character_flag = needs_nomad_conversion
							}
							set_government_type = nomadic_tribal_government
							character_event = { id = nomadtribalmaint.2 }
							character_event = { id = nomadtribalmaint.11 }
							character_event = { id = nomadtribalmaint.13 }
							clr_character_flag = needs_nomad_conversion
						}
					}
				}
			}
			# else = { #means you lost...
				# event_target:combatant_1 = { imprison = event_target:combatant_2 }
			# }
		}
		
	###	#################################### #### #### ####

		else_if = { # If you are the *defender*...
			limit = { event_target:combatant_2 = { character = PREV } }
			if = {
				limit = {
					OR = { #and you *won*...
						has_character_flag = is_victorious_attacker
						has_character_flag = is_victorious_defender
					}
				}
				# event_target:combatant_1 = { imprison = event_target:combatant_2 }
			}
			else = { # you *lost*...
				if = {
					limit = {
						event_target:combatant_1 = {
							is_landed = no
							dynasty = event_target:combatant_2
							OR = {
								is_child_of = event_target:combatant_2
								sibling = event_target:combatant_2
								is_parent_of = event_target:combatant_2
							}
						}
					}
					event_target:combatant_2 = {
						any_demesne_title = {
							grant_title = {
							target = event_target:combatant_1
							type = duel
							}
						}
					}
					event_target:combatant_1 = {
						if = {
							limit = { is_nomadic_tribal_culture = no }
							culture = event_target:combatant_2
						}
						set_government_type = nomadic_tribal_government
						character_event = { id = nomadtribalmaint.2 }
						character_event = { id = nomadtribalmaint.11 }
						character_event = { id = nomadtribalmaint.13 }
					}
				}
				else = {
					event_target:combatant_1 = {
						if = {
							limit = {
								OR = {
									is_landed = no
									AND = {
										lower_tier_than = ROOT
										is_tribal = yes
										NOT = { same_realm = ROOT }
									}
								}
							}
							set_character_flag = needs_nomad_conversion
						}
					}
					event_target:target_title = {
						grant_title = {
						target = event_target:combatant_1
						type = duel
						}
					}
					event_target:combatant_1 = {
						if = {
							limit = {
								has_character_flag = needs_nomad_conversion
							}
							set_government_type = nomadic_tribal_government
							character_event = { id = nomadtribalmaint.2 }
							character_event = { id = nomadtribalmaint.11 }
							character_event = { id = nomadtribalmaint.13 }
							clr_character_flag = needs_nomad_conversion
						}
					}
				}
			}
		}
	}
}

duel_check_for_lycan_infection = {
	if = {
		limit = {
			NOR = {
				has_character_flag = werewolf_attack
				has_character_flag = wererat_attack
				has_character_flag = weretiger_attack
				has_character_flag = werecrocodile_attack
			}
			is_lycanthrope_compatible = yes
			OR = {
				AND = {
					event_target:combatant_1 = { character = PREV }
					event_target:combatant_2 = {
						OR = {
							trait = natural_lycanthrope
							trait = afflicted_lycanthrope
						}
					}
				}
				AND = {
					event_target:combatant_2 = { character = PREV }
					event_target:combatant_1 = {
						OR = {
							trait = natural_lycanthrope
							trait = afflicted_lycanthrope
						}
					}
				}
			}
		}
		random = {
			chance = 20 # too high?
			if = {
				limit = {
					event_target:combatant_1 = {
						OR = {
							trait = natural_lycanthrope
							trait = afflicted_lycanthrope
						}
					}
				}
				event_target:combatant_1 = {
					save_event_target_as = lycan_infector
				}
			}
			else = {
				event_target:combatant_2 = {
					save_event_target_as = lycan_infector
				}
			}
			if = {
				limit = {
					event_target:lycan_infector = {
						trait = werewolf
					}
				}
				set_character_flag = werewolf_attack
			}
			else_if = {
				limit = {
					event_target:lycan_infector = {
						trait = wererat
					}
				}
				set_character_flag = wererat_attack
			}
			else_if = {
				limit = {
					event_target:lycan_infector = {
						trait = weretiger
					}
				}
				set_character_flag = weretiger_attack
			}
			else_if = {
				limit = {
					event_target:lycan_infector = {
						trait = werecrocodile
					}
				}
				set_character_flag = werecrocodile_attack
			}
			character_event = { id = frwerebeast.6 days = 10 }
		}
	}
}

simulate_duel_buff_party_effect = { #varoius party members complement each other
	if = {
		limit = {
			OR = {
				event_target:party_member_1 = { AND = { always = yes is_alive = yes z_divine_caster = yes } }
				event_target:party_member_2 = { AND = { always = yes is_alive = yes z_divine_caster = yes } }
				event_target:party_member_3 = { AND = { always = yes is_alive = yes z_divine_caster = yes } }
				event_target:party_member_4 = { AND = { always = yes is_alive = yes z_divine_caster = yes } }
			}
		}
		if = {
			limit = { check_variable = { which = local_combat_rating_1 value > 50 } }
			multiply_variable = { which = local_combat_rating_1 value = 1.2 }
		}
		else = { change_variable = { which = local_combat_rating_1 value = 10 } }

		if = {
			limit = { check_variable = { which = local_combat_rating_2 value > 50 } }
			multiply_variable = { which = local_combat_rating_2 value = 1.2 }
		}
		else = { change_variable = { which = local_combat_rating_2 value = 10 } }

		if = {
			limit = { check_variable = { which = local_combat_rating_3 value > 50 } }
			multiply_variable = { which = local_combat_rating_3 value = 1.2 }
		}
		else = { change_variable = { which = local_combat_rating_3 value = 10 } }

		if = {
			limit = { check_variable = { which = local_combat_rating_4 value > 50 } }
			multiply_variable = { which = local_combat_rating_4 value = 1.2 }
		}
		else = { change_variable = { which = local_combat_rating_4 value = 10 } }
	}
	if = {
		limit = {
			OR = {
				event_target:party_member_1 = { AND = { always = yes is_alive = yes z_arcane_caster = yes } }
				event_target:party_member_2 = { AND = { always = yes is_alive = yes z_arcane_caster = yes } }
				event_target:party_member_3 = { AND = { always = yes is_alive = yes z_arcane_caster = yes } }
				event_target:party_member_4 = { AND = { always = yes is_alive = yes z_arcane_caster = yes } }
			}
		}
		if = {
			limit = { check_variable = { which = local_combat_rating_1 value > 50 } }
			multiply_variable = { which = local_combat_rating_1 value = 1.2 }
		}
		else = { change_variable = { which = local_combat_rating_1 value = 10 } }

		if = {
			limit = { check_variable = { which = local_combat_rating_2 value > 50 } }
			multiply_variable = { which = local_combat_rating_2 value = 1.2 }
		}
		else = { change_variable = { which = local_combat_rating_2 value = 10 } }

		if = {
			limit = { check_variable = { which = local_combat_rating_3 value > 50 } }
			multiply_variable = { which = local_combat_rating_3 value = 1.2 }
		}
		else = { change_variable = { which = local_combat_rating_3 value = 10 } }

		if = {
			limit = { check_variable = { which = local_combat_rating_4 value > 50 } }
			multiply_variable = { which = local_combat_rating_4 value = 1.2 }
		}
		else = { change_variable = { which = local_combat_rating_4 value = 10 } }
	}
	if = {
		limit = {
			OR = {
				event_target:party_member_1 = { AND = { always = yes is_alive = yes z_psionic_caster = yes } }
				event_target:party_member_2 = { AND = { always = yes is_alive = yes z_psionic_caster = yes } }
				event_target:party_member_3 = { AND = { always = yes is_alive = yes z_psionic_caster = yes } }
				event_target:party_member_4 = { AND = { always = yes is_alive = yes z_psionic_caster = yes } }
			}
		}
		if = {
			limit = { check_variable = { which = local_combat_rating_1 value > 50 } }
			multiply_variable = { which = local_combat_rating_1 value = 1.1 }
		}
		else = { change_variable = { which = local_combat_rating_1 value = 5 } }

		if = {
			limit = { check_variable = { which = local_combat_rating_2 value > 50 } }
			multiply_variable = { which = local_combat_rating_2 value = 1.1 }
		}
		else = { change_variable = { which = local_combat_rating_2 value = 5 } }

		if = {
			limit = { check_variable = { which = local_combat_rating_3 value > 50 } }
			multiply_variable = { which = local_combat_rating_3 value = 1.1 }
		}
		else = { change_variable = { which = local_combat_rating_3 value = 5 } }

		if = {
			limit = { check_variable = { which = local_combat_rating_4 value > 50 } }
			multiply_variable = { which = local_combat_rating_4 value = 1.1 }
		}
		else = { change_variable = { which = local_combat_rating_4 value = 5 } }
	}
	if = {
		limit = {
			OR = {
				event_target:party_member_1 = { AND = { always = yes is_alive = yes z_fighter_classes = yes } }
				event_target:party_member_2 = { AND = { always = yes is_alive = yes z_fighter_classes = yes } }
				event_target:party_member_3 = { AND = { always = yes is_alive = yes z_fighter_classes = yes } }
				event_target:party_member_4 = { AND = { always = yes is_alive = yes z_fighter_classes = yes } }
			}
		}
		if = {
			limit = { check_variable = { which = local_combat_rating_1 value > 50 } }
			multiply_variable = { which = local_combat_rating_1 value = 1.1 }
		}
		else = { change_variable = { which = local_combat_rating_1 value = 5 } }

		if = {
			limit = { check_variable = { which = local_combat_rating_2 value > 50 } }
			multiply_variable = { which = local_combat_rating_2 value = 1.1 }
		}
		else = { change_variable = { which = local_combat_rating_2 value = 5 } }

		if = {
			limit = { check_variable = { which = local_combat_rating_3 value > 50 } }
			multiply_variable = { which = local_combat_rating_3 value = 1.1 }
		}
		else = { change_variable = { which = local_combat_rating_3 value = 5 } }

		if = {
			limit = { check_variable = { which = local_combat_rating_4 value > 50 } }
			multiply_variable = { which = local_combat_rating_4 value = 1.1 }
		}
		else = { change_variable = { which = local_combat_rating_4 value = 5 } }
	}
	if = {
		limit = {
			OR = {
				event_target:party_member_1 = { AND = { always = yes is_alive = yes z_rogue_classes = yes } }
				event_target:party_member_2 = { AND = { always = yes is_alive = yes z_rogue_classes = yes } }
				event_target:party_member_3 = { AND = { always = yes is_alive = yes z_rogue_classes = yes } }
				event_target:party_member_4 = { AND = { always = yes is_alive = yes z_rogue_classes = yes } }
			}
		}
		if = {
			limit = { check_variable = { which = local_combat_rating_1 value > 50 } }
			multiply_variable = { which = local_combat_rating_1 value = 1.1 }
		}
		else = { change_variable = { which = local_combat_rating_1 value = 5 } }

		if = {
			limit = { check_variable = { which = local_combat_rating_2 value > 50 } }
			multiply_variable = { which = local_combat_rating_2 value = 1.1 }
		}
		else = { change_variable = { which = local_combat_rating_2 value = 5 } }

		if = {
			limit = { check_variable = { which = local_combat_rating_3 value > 50 } }
			multiply_variable = { which = local_combat_rating_3 value = 1.1 }
		}
		else = { change_variable = { which = local_combat_rating_3 value = 5 } }

		if = {
			limit = { check_variable = { which = local_combat_rating_4 value > 50 } }
			multiply_variable = { which = local_combat_rating_4 value = 1.1 }
		}
		else = { change_variable = { which = local_combat_rating_4 value = 5 } }
	}
}

simulate_duel_effect = { # simulate a duel without actually dueling. Need to set 'local_combatant_1_combat_rating' and 'local_combatant_2_combat_rating' variables before using. Useful if you want to set up a fight between a character and a non-sentient, non-humanoid or otherwise not playable being
	set_variable = {
		which = local_combatant_1_win_count
		value = 0
	}
	set_variable = {
		which = local_combatant_2_win_count
		value = 0
	}
	if = { limit = { check_variable = { which = local_round_count value == 0 } } set_variable = { which = local_round_count value = 3 } } # if we haven't set up round count, default it to 3

	while = { # dueling until one of the combatants reaches previously set round count
		limit = {
			#AND = {
				check_variable = {
					which = local_combatant_1_win_count
					which < local_round_count
				}
				check_variable = {
					which = local_combatant_2_win_count
					which < local_round_count
				}
			#}
		}
		simulate_duel_round_effect = yes
	}
	# now we can identify the winner by win count being equal to round count
}

simulate_duel_round_effect = {
	# first we normalize combat rating a bit if it's negative or too low
	if = {
		limit = {
			check_variable = { which = local_combatant_1_combat_rating value <= 5 }
		}
		set_variable = { which = local_temp which = local_combatant_1_combat_rating }
		if = { limit = { check_variable = { which = local_temp value < 0 } } multiply_variable = { which = local_temp value = -1 } }
		change_variable = { which = local_temp value = 6 }
		change_variable = { which = local_combatant_1_combat_rating which = local_temp }
		change_variable = { which = local_combatant_2_combat_rating which = local_temp }
	}
	if = {
		limit = {
			check_variable = { which = local_combatant_2_combat_rating value <= 5 }
		}
		set_variable = { which = local_temp which = local_combatant_2_combat_rating }
		if = { limit = { check_variable = { which = local_temp value < 0 } } multiply_variable = { which = local_temp value = -1 } }
		change_variable = { which = local_temp value = 6 }
		change_variable = { which = local_combatant_1_combat_rating which = local_temp }
		change_variable = { which = local_combatant_2_combat_rating which = local_temp }
	}

	# then we calculate the weights
	set_variable = { which = local_combined_combat_rating which = local_combatant_1_combat_rating }
	change_variable = { which = local_combined_combat_rating which = local_combatant_2_combat_rating }
	set_variable = {
		which = local_combatant_1_combat_rating_weight
		which = local_combatant_1_combat_rating
	}
	divide_variable = {
		which = local_combatant_1_combat_rating_weight
		which = local_combined_combat_rating
	}
	set_variable = {
		which = local_combatant_2_combat_rating_weight
		which = local_combatant_2_combat_rating
	}
	divide_variable = {
		which = local_combatant_2_combat_rating_weight
		which = local_combined_combat_rating
	}

	# then we throw a dice and see who won
	random_list = {
		1 = { # 1st combatant wins
			simulate_duel_round_combatant_1_outcome_score = yes
			change_variable = {
				which = local_combatant_1_win_count
				value = 1
			}
		}
		1 = { # 2nd combatant wins
			simulate_duel_round_combatant_2_outcome_score = yes
			change_variable = {
				which = local_combatant_2_win_count
				value = 1
			}
		}
	}
}

simulate_duel_injury_effect = { # Deal an injury proportional to lost rounds, so you need to set local_lose_count before calling
	if = { limit = { check_variable = { which = local_round_count value == 0 } } set_variable = { which = local_round_count value = 3 } } # if somehow round count is not set, default it to 3
	set_variable = { which = local_injury_weight which = local_lose_count }
	divide_variable = { which = local_injury_weight which = local_round_count }
	if = {
		limit = {
			check_variable = {
				which = local_injury_weight
				value < 0.33
			}
		}
		simulate_duel_injury_minor_effect = yes
	}
	else_if = {
		limit = {
			check_variable = {
				which = local_injury_weight
				value < 0.66
			}
		}
		simulate_duel_injury_mild_effect = yes
	}
	else_if = {
		limit = {
			check_variable = {
				which = local_injury_weight
				value < 1
			}
		}
		simulate_duel_injury_major_effect = yes
	}
	else = {
		simulate_duel_injury_fatal_effect = yes
	}
}

simulate_duel_injury_minor_effect = {
	random_list = {
		20 = {
			apply_random_minor_injury_effect = yes
		}
		20 = {
			good_soldier_outcome_score = yes
		}
	}
}
simulate_duel_injury_mild_effect = {
	random_list = {
		20 = {
			bad_soldier_outcome_score = yes
			if = { limit = { NOT = { trait = wounded } } add_trait = wounded }
			else_if = { limit = { NOT = { trait = severely_injured } } add_severely_injured_effect = yes }
			else = {
				if = {
					limit = { has_dlc = "Reapers" }
					random_list = {
						10 = {
							trigger = {
								NOR = {
									trait = one_eyed
									trait = blinded
									race_is_one_eyed = yes
								}
							}
							add_trait = one_eyed
						}
						10 = {
							trigger = { trait = one_eyed NOT = { trait = blinded } }
							add_trait = blinded
						}
						10 = {
							trigger = {
								NOR = {
									trait = one_handed
									trait = creature_beholder
									trait = creature_naga
									trait = creature_elder_brain
									trait = creature_aboleth
								}
							}
							add_trait = one_handed
						}
						10 = {
							trigger = {
								NOR = {
									trait = one_legged
									race_is_legless = yes
								}
							}
							add_trait = one_legged
						}
						10 = {
							trigger = { NOT = { trait = disfigured } }
							add_trait = disfigured
						}
						10 = {
							trigger = { NOT = { trait = mangled } }
							add_trait = mangled
						}
					}
					add_severely_injured_effect = yes
				}
				else = {
					if = { limit = { NOT = { trait = maimed } } add_trait = maimed }
				}
			}
			change_variable = {
				which = scarred_variable
				value = 2
			}
			apply_random_minor_injury_effect = yes
		}
		20 = {
			good_soldier_outcome_score = yes
			apply_random_minor_injury_effect = yes
		}
		20 = {
		}
	}
}
simulate_duel_injury_major_effect = {
	random_list = {
		20 = {
			bad_soldier_outcome_score = yes
			if = {
				limit = { has_dlc = "Reapers" }
				random_list = {
					10 = {
						trigger = {
							NOR = {
								trait = one_eyed
								trait = blinded
								race_is_one_eyed = yes
							}
						}
						add_trait = one_eyed
					}
					10 = {
						trigger = {
							OR = {
								trait = one_eyed
								race_is_one_eyed = yes
							}
							NOT = { trait = blinded }
						}
						add_trait = blinded
					}
					10 = {
						trigger = {
							NOR = {
								trait = one_handed
								trait = creature_beholder
								trait = creature_naga
								trait = creature_elder_brain
								trait = creature_aboleth
							}
						}
						add_trait = one_handed
					}
					10 = {
						trigger = {
							NOR = {
								trait = one_legged
								race_is_legless = yes
							}
						}
						add_trait = one_legged
					}
					10 = {
						trigger = { NOT = { trait = disfigured } }
						add_trait = disfigured
					}
					10 = {
						trigger = { NOT = { trait = mangled } }
						add_trait = mangled
					}
				}
				add_severely_injured_effect = yes
			}
			else = {
				if = { limit = { NOT = { trait = maimed } } add_trait = maimed }
			}
			change_variable = {
				which = scarred_variable
				value = 2
			}
			add_severely_injured_effect = yes
			apply_random_minor_injury_effect = yes
		}
		20 = {
			good_soldier_outcome_score = yes
			if = { limit = { NOT = { trait = wounded } } add_trait = wounded }
			else_if = { limit = { NOT = { trait = severely_injured } } add_severely_injured_effect = yes }
			else = {
				if = {
					limit = { has_dlc = "Reapers" }
					random_list = {
						10 = {
							trigger = {
								NOR = {
									trait = one_eyed
									trait = blinded
									race_is_one_eyed = yes
								}
							}
							add_trait = one_eyed
						}
						10 = {
							trigger = {
								OR = {
									trait = one_eyed
									race_is_one_eyed = yes
								}
								NOT = { trait = blinded }
							}
							add_trait = blinded
						}
						10 = {
							trigger = {
								NOR = {
									trait = one_handed
									trait = creature_beholder
									trait = creature_naga
									trait = creature_elder_brain
									trait = creature_aboleth
								}
							}
							add_trait = one_handed
						}
						10 = {
							trigger = {
								NOR = {
									trait = one_legged
									race_is_legless = yes
								}
							}
							add_trait = one_legged
						}
						10 = {
							trigger = { NOT = { trait = disfigured } }
							add_trait = disfigured
						}
						10 = {
							trigger = { NOT = { trait = mangled } }
							add_trait = mangled
						}
					}
					add_severely_injured_effect = yes
				}
				else = {
					if = { limit = { NOT = { trait = maimed } } add_trait = maimed }
				}
			}
			apply_random_minor_injury_effect = yes
			change_variable = {
				which = scarred_variable
				value = 2
			}
		}
		20 = {
			apply_random_minor_injury_effect = yes
		}
		20 = {

		}
	}
}
simulate_duel_injury_fatal_effect = {
	if = {
		limit = { has_dlc = "Reapers" }
		random_list = {
			10 = {
				trigger = {
					NOR = {
						trait = one_eyed
						trait = blinded
						race_is_one_eyed = yes
					}
				}
				add_trait = one_eyed
			}
			10 = {
				trigger = {
					OR = {
						trait = one_eyed
						race_is_one_eyed = yes
					}
					NOT = { trait = blinded }
				}
				add_trait = blinded
			}
			10 = {
				trigger = {
					NOR = {
						trait = one_handed
						trait = creature_beholder
						trait = creature_naga
						trait = creature_elder_brain
						trait = creature_aboleth
					}
				}
				add_trait = one_handed
			}
			10 = {
				trigger = {
					NOR = {
						trait = one_legged
						race_is_legless = yes
					}
				}
				add_trait = one_legged
			}
			10 = {
				trigger = { NOT = { trait = disfigured } }
				add_trait = disfigured
			}
			10 = {
				trigger = { NOT = { trait = mangled } }
				add_trait = mangled
			}
		}
		add_severely_injured_effect = yes
	}
	else = {
		if = { limit = { NOT = { trait = maimed } } add_trait = maimed }
	}
}