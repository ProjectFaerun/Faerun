namespace = EVER

########################JOINING############################

#From on_character_ask_to_join_society
character_event = {
    id = EVER.100
    hide_window = yes
    is_triggered_only = yes
    trigger = {
    	FROM = { leader = { society_member_of = everlasting } }
    }
    immediate = {
    	if = { #Find a non-prisoner member
    		limit = { FROM = { leader = { prisoner = yes } } }
    		FROM = {
    			any_society_member = {
    				limit = {
    					society_member_of = everlasting
    					society_rank == 4
    					prisoner = no
    				}
    				character_event = { id = EVER.101 }
    				break = yes
    			}
    			any_society_member = {
    				limit = {
    					society_member_of = everlasting
    					society_rank == 3
    					prisoner = no
    				}
    				character_event = { id = EVER.101 }
    				break = yes
    			}
    			any_society_member = {
    				limit = {
    					society_member_of = everlasting
    					society_rank == 2
    					prisoner = no
    				}
    				character_event = { id = EVER.101 }
    				break = yes
    			}
    			any_society_member = {
    				limit = {
    					society_member_of = everlasting
    					society_rank == 1
    					prisoner = no
    				}
    				character_event = { id = EVER.101 }
    				break = yes
    			}
    		}
			#Everyone is somehow in prison so just use teh leader anyway
    	}
    	FROM = { leader = { character_event = { id = EVER.101 } } }
    }
}

#Ping event
character_event = {
    id = EVER.101
    hide_window = yes
    is_triggered_only = yes
    immediate = {
    	FROM = { letter_event = { id = EVER.102 } }
    }
}

#Welcome letter
letter_event = {
    id = EVER.102
    desc = EVTDESC_EVER_102
    border = GFX_event_letter_frame_religion

    is_triggered_only = yes

    immediate = { set_character_flag = society_join_block }

    option = {
      name = EVTOPTA_EVER_102

      join_society = everlasting

      clr_character_flag = society_join_block
    }
}

########################AI JOIN AND AI RANK UP###########################

character_event = { #force the AI to join a society
  id = EVER.110
  hide_window = yes
  is_triggered_only = yes

	immediate = {
		if = {
			limit = { #if he's already a member, will force a rank up 25% of the time
				ai = yes
				prisoner = no
				NOT = { trait = incapable }
				higher_tier_than = BARON
				society_member_of = everlasting
				society_rank <= 3
				society_can_rank_up = yes
			}
			random_list = {
				75 = {}
				25 = {
					society_rank_up = 1
				}
			}
		}
		if = { #force the joining event on AI
			limit = {
				ai = yes
				prisoner = no
				NOT = { trait = incapable }
        is_adult = yes
        is_in_society = no
        controls_religion = no
				block_general_event_trigger = no
			}
			character_event = { id = EVER.111 }
		}
	}
}

character_event = { #AI join event
	id = EVER.111
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		random_list = {
			60 = { # do nothing
			}
			40 = {
				trigger = {
					can_join_society = everlasting
				}
				modifier = {
					factor = 2
					OR = {
						trait = schemer
						trait = duelist
					}
				}
        modifier = {
          factor = 2
          trait = zealous
        }
        modifier = {
          factor = 2
          trait = brave
        }
        modifier = {
          factor = 2
          trait = deceitful
        }
				modifier = {
					factor = 0
					OR = {
						trait = kind
						trait = cynical
						trait = arbitrary
						trait = craven
					}
				}
				modifier = {
					factor = 0.1
					is_landed = no
				}
				join_society = everlasting #join the society
				random_list = { # Artificially increase society influence for balance purposes, not really useful in my opinion.
					75 = {
						modifier = {
							factor = 0
							society_influence >= 30
						}
					}
					25 = {
					}
				}
				if = { # Make grandmaster is there is none
					limit = {
						NOT = {
							society = {
								any_society_member = {
									is_society_grandmaster = yes
								}
							}
						}
					}
					set_society_grandmaster = yes
				}
			}
		}
	}
}



###MISSIONS###

#MISSION: Assassinate a target
character_event = {
	id = EVER.6200
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		random_list = {
			40 = { #Infidel ruler at war with shia, or their vassal/commander
				trigger = {
					any_independent_ruler = {
						is_within_diplo_range = ROOT #Not using assassins_appropriate_target_trigger here to also find vassals/commanders
						NOT = { character = ROOT }
						NOT = { religion = qisma }
						NOT = { society_member_of = everlasting }
						any_war = {
							attacker = { character = PREV }
							defender = {
								religion = qisma
								NOT = { character = ROOT }
							}
						}
					}
				}

				#Find the ruler
				random_independent_ruler = {
					limit = {
						is_within_diplo_range = ROOT #Not using assassins_appropriate_target_trigger here to also find vassals/commanders
						NOT = { character = ROOT }
						NOT = { religion = qisma }
						NOT = { society_member_of = everlasting }
						any_war = {
							any_attacker = { character = PREV }
							defender = {
								religion = qisma
								NOT = { character = ROOT }
							}
						}
					}

					if = {
						limit = {
							assassins_appropriate_target_trigger = yes
						}
						save_event_target_as = assassins_target
					}

					else =  {

						save_event_target_as = assassins_aggressor

						random_vassal = {
							limit = {
								assassins_appropriate_target_trigger = yes
								NOT = { character = ROOT }
								NOT = { society_member_of = everlasting }
								OR = {
									liege = { is_feudal = yes }
									any_war = {
										any_attacker = { character = PREV }
										defender = { religion = qisma }
									}
								}
							}
							save_event_target_as = assassins_target
						}

						random_courtier_or_vassal = {
							limit = {
								assassins_appropriate_target_trigger = yes
								NOT = { society_member_of = everlasting }
								in_command = yes
								OR = {
									is_ruler = no
									OR = {
										liege = { is_feudal = yes }
										any_war = {
											any_attacker = { character = PREV }
											defender = { religion = qisma }
										}
									}
								}
							}
							save_event_target_as = assassins_target
						}

						event_target:assassins_target = {
							if = {
								limit = { independent = yes }
								set_character_flag = assassins_target_war_attacker
							}
							if = {
								limit = {
									independent = no
									in_command = no
								}
								set_character_flag = assassins_target_war_attacker_vassal
							}
							if = {
								limit = {
									independent = no
									in_command = yes
								}
								set_character_flag = assassins_target_war_attacker_commander
							}
						}
					}
				}
			}
			15 = { #Assaulted an assassin
				trigger = {
					any_character = {
						is_offmap_ruler = no
						NOT = { character = ROOT }
						assassins_appropriate_target_trigger = yes
						has_character_flag = assassins_target_assaulted_member
					}
				}
				random_character = {
					limit = {
						is_offmap_ruler = no
						NOT = { character = ROOT }
						assassins_appropriate_target_trigger = yes
						has_character_flag = assassins_target_assaulted_member
					}
					save_event_target_as = assassins_target
				}
			}
			20 = { #Killed an assassin
				trigger = {
					any_character = {
						is_offmap_ruler = no
						NOT = { character = ROOT }
						assassins_appropriate_target_trigger = yes
						has_character_flag = assassins_target_killed_member
					}
				}
				random_character = {
					limit = {
						is_offmap_ruler = no
						NOT = { character = ROOT }
						assassins_appropriate_target_trigger = yes
						has_character_flag = assassins_target_killed_member
					}
					save_event_target_as = assassins_target
				}
			}
			20 = { #Marked for death by GM
				trigger = {
					any_character = {
						is_offmap_ruler = no
						NOT = { character = ROOT }
						assassins_appropriate_target_trigger = yes
						has_character_flag = assassins_target_marked_for_death
					}
				}
				random_character = {
					limit = {
						is_offmap_ruler = no
						NOT = { character = ROOT }
						assassins_appropriate_target_trigger = yes
						has_character_flag = assassins_target_marked_for_death
					}
					save_event_target_as = assassins_target
				}
			}
			15 = { #Cruel non-shia ruler with shia population
				trigger = {
					any_independent_ruler = {
						assassins_appropriate_target_trigger = yes
						NOT = { character = ROOT }
						NOT = { society_member_of = everlasting }
						OR = {
							trait = impaler
							trait = cruel
							trait = arbitrary
						}
						NOT = { religion = qisma }
						any_realm_province = { religion = qisma }
					}
				}
				random_independent_ruler = {
					limit = {
						assassins_appropriate_target_trigger = yes
						NOT = { character = ROOT }
						NOT = { society_member_of = everlasting }
						OR = {
              trait = impaler
              trait = cruel
              trait = arbitrary
						}
						NOT = { religion = qisma }
						any_realm_province = { religion = qisma }
					}
					save_event_target_as = assassins_target
					set_character_flag = assassins_target_persecutes_elven_pantheons
				}
			}
		}

		if = { #Fallback
			limit = { NOT = { event_target:assassins_target = { always = yes } } }
			random_playable_ruler = {
				limit = {
					assassins_appropriate_target_trigger = yes
					NOT = { character = ROOT }
					NOT = { religion = qisma }
					NOT = { society_member_of = everlasting }
					OR = {
						NOT = {
							any_playable_ruler = {
								assassins_appropriate_target_trigger = yes
								NOT = { religion = qisma }
								NOT = { society_member_of = everlasting }

								OR = {
									trait = cruel
									trait = arbitrary
                  trait = impaler
								}
							}
						}
						OR = {
							trait = cruel
							trait = arbitrary
              trait = impaler
						}
					}
				}
				save_event_target_as = assassins_target
				set_character_flag = assassins_target_fallback
			}
		}

		if = {
			limit = {
				event_target:assassins_target = { always = yes }
				is_within_diplo_range = event_target:assassins_target
			}
			random_society_member = {
				limit = { society_rank = { rank == 4 society = everlasting } }
				character_event = { id = EVER.6201 }
			}
		}
		if = {
			limit = { NOT = { is_within_diplo_range = event_target:assassins_target } }
			event_target:assassins_target = {
				clr_character_flag = assassins_target_persecutes_elven_pantheons
				clr_character_flag = assassins_target_fallback
				clr_character_flag = assassins_target_war_attacker
				clr_character_flag = assassins_target_war_attacker_vassal
				clr_character_flag = assassins_target_war_attacker_commander
			}
		}
	}
}

#Ping event for GM
character_event = {
	id = EVER.6201
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		if = {
			limit = { event_target:assassins_target = { always = yes } }
			FROM = { society_quest_event = { id = EVER.6202 days = 7 random = 7 } }
		}
	}
}

#You get your target
society_quest_event = {
	id = EVER.6202
	title = quest_the_assassins_assassination
	quest_target = event_target:assassins_target

	trigger = {
		is_in_society = yes
		event_target:assassins_target = {
			is_alive = yes
		}
	}

	desc = {
		trigger = { event_target:assassins_target = { has_character_flag = assassins_target_war_attacker } }
		text = EVTDESC_MNM_6202_WAR_ATTACKER
	}
	desc = {
		trigger = { event_target:assassins_target = { has_character_flag = assassins_target_war_attacker_vassal } }
		text = EVTDESC_MNM_6202_WAR_ATTACKER_VASSAL
	}
	desc = {
		trigger = { event_target:assassins_target = { has_character_flag = assassins_target_war_attacker_commander } }
		text = EVTDESC_MNM_6202_WAR_ATTACKER_COMMANDER
	}
	desc = {
		trigger = { event_target:assassins_target = { has_character_flag = assassins_target_assaulted_member } }
		text = EVTDESC_MNM_6202_ASSAULTED_MEMBER
	}
	desc = {
		trigger = { event_target:assassins_target = { has_character_flag = assassins_target_killed_member } }
		text = EVTDESC_MNM_6202_KILLED_MEMBER
	}
	desc = {
		trigger = { event_target:assassins_target = { has_character_flag = assassins_target_marked_for_death } }
		text = EVTDESC_MNM_6202_MARKED_FOR_DEATH
	}
	desc = {
		trigger = { event_target:assassins_target = { has_character_flag = assassins_target_persecutes_elven_pantheons } }
		text = EVTDESC_MNM_6202_PERSECUTED_SHIITES
	}
	desc = {
		trigger = { event_target:assassins_target = { has_character_flag = assassins_target_fallback } }
		text = EVTDESC_MNM_6202_FALLBACK
	}

	is_triggered_only = yes

	immediate = { #For loc
		hidden_effect = {
			event_target:assassins_target = {
				any_war = {
					limit = { defender = { religion = qisma } }
					defender = { save_event_target_as = elven_pantheon_defender }
				}
				any_realm_province = {
					limit = { religion = qisma }
					save_event_target_as = elven_pantheon_province
				}
			}
		}
	}

	option = {
		name = ACCEPT

		event_target:assassins_target = {
			set_quest_target = {
				id = quest_the_assassins_assassination
				holder = ROOT
			}
		}

		hidden_effect = {
			if = { #Makes sure the AI actually does the mission
				limit = { ai = yes }
				random_list = {
					20 = {
						trigger = {
							attribute_diff = { character = event_target:assassins_target attribute = intrigue value = 6 }
							society_rank = 2
						}
						modifier = { intrigue = 12 factor = 1.2 }
						modifier = { intrigue = 14 factor = 1.2 }
						modifier = { intrigue = 16 factor = 1.2 }
						modifier = { intrigue = 18 factor = 1.2 }
						character_event = { id = EVER.6948 days = 150 random = 100 } #Triggers plot event
					}
					20 = {
						trigger = { attribute_diff = { character = event_target:assassins_target attribute = intrigue value = 3 } }
						modifier = { intrigue = 12 factor = 1.2 }
						modifier = { intrigue = 14 factor = 1.2 }
						modifier = { intrigue = 16 factor = 1.2 }
						modifier = { intrigue = 18 factor = 1.2 }
						character_event = { id = EVER.6948 days = 300 random = 100 } #Triggers plot event
					}
					20 = {
						modifier = { intrigue = 12 factor = 1.2 }
						modifier = { intrigue = 14 factor = 1.2 }
						modifier = { intrigue = 16 factor = 1.2 }
						modifier = { intrigue = 18 factor = 1.2 }
						character_event = { id = EVER.6948 days = 500 random = 300 } #Triggers plot event
					}
					40 = {
						modifier = { event_target:assassins_target = { intrigue = 12 } factor = 1.2 }
						modifier = { event_target:assassins_target = { intrigue = 14 } factor = 1.2 }
						modifier = { event_target:assassins_target = { intrigue = 16 } factor = 1.2 }
						modifier = { event_target:assassins_target = { intrigue = 18 } factor = 1.2 }
						modifier = { event_target:assassins_target = { tier = COUNT } factor = 1.5 }
						modifier = { event_target:assassins_target = { tier = DUKE } factor = 2 }
						modifier = { event_target:assassins_target = { tier = KING } factor = 2.5 }
						modifier = { event_target:assassins_target = { tier = EMPEROR } factor = 5 }
						character_event = { id = EVER.6949 } #Clears quest
					}
				}
			}
		}
		event_target:assassins_target = {
			set_character_flag = appear_in_option
			clr_character_flag = appear_in_option

			hidden_effect = {
				clr_character_flag = assassins_target_persecutes_elven_pantheons
				clr_character_flag = assassins_target_fallback
				clr_character_flag = assassins_target_war_attacker
				clr_character_flag = assassins_target_war_attacker_vassal
				clr_character_flag = assassins_target_war_attacker_commander
			}
		}
	}

	option = {
		name = DECLINE
		custom_tooltip = { text = decline_quest_tooltip }

		hidden_effect = {
			event_target:assassins_target = {
				clr_character_flag = assassins_target_persecutes_elven_pantheons
				clr_character_flag = assassins_target_fallback
				clr_character_flag = assassins_target_war_attacker
				clr_character_flag = assassins_target_war_attacker_vassal
				clr_character_flag = assassins_target_war_attacker_commander
			}

			add_character_modifier = {
				name = quest_cooldown_timer
				hidden = yes
				days = 1000
			}
		}

		ai_chance = { factor = 0 }
	}
}

#Helps AI do mission
character_event = {
    id = EVER.6948
    hide_window = yes
    is_triggered_only = yes
    trigger = {
    	NOT = { plot_target_char = { is_quest_target_of = ROOT } }
    	has_quest = quest_the_assassins_assassination
    }
    immediate = {
    	character_event = { id = MNM.6100 }
    }
}

#AI clean-up
character_event = {
    id = EVER.6949
    hide_window = yes
    is_triggered_only = yes
    trigger = {
    	NOT = { plot_target_char = { is_quest_target_of = ROOT } }
    	has_quest = quest_the_assassins_assassination
    }
    immediate = {
    	clr_quest = {
    		id = quest_the_assassins_assassination
    		failure = yes
    	}
    }
}

#character_event = {
 #   id = EVER.6950
  #  desc = EVTDESC_MNM_6950
   # picture = GFX_evt_assassination
    #border = GFX_event_normal_frame_intrigue
#
 #   is_triggered_only = yes
#
 #   trigger = {
  #  	has_quest = quest_the_assassins_assassination
   # }
#
 #   option = {
  #      name = EVTOPTA_MNM_6106
   #     clr_quest = quest_the_assassins_assassination
    #    sound_effect = assassins_assassinate_character
#
#		if = {
#			limit = { event_target:plot_target = { higher_tier_than = DUKE } }
#			add_society_currency_medium_effect = yes
#			increase_visibility_effect = yes
#		}
#		if = {
#			limit = { event_target:plot_target = { lower_tier_than = KING } }
#			add_society_currency_minor_effect = yes
#			increase_visibility_effect = yes
#		}
 #   }
#}

#MISSION: Convert specific province to Qisma
#GM ping event
character_event = {
	id = EVER.6203
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		FROM = {
			religion = qisma
			any_realm_province = { NOT = { religion = qisma } }
		}
	}

	immediate = {
		FROM = { society_quest_event = { id = EVER.6204 days = 7 random = 7 } }
	}
}

society_quest_event = {
	id = EVER.6204
	quest_target = event_target:conversion_province

	desc = {
		trigger = {
			event_target:conversion_province = { owner = { character = ROOT } }
			NOT = { has_alternate_start_parameter = { key = religion_names value = random } }
		}
		text = EVTDESC_EVER_6204_A
	}
	desc = {
		trigger = {
			event_target:conversion_province = { NOT = { owner = { character = ROOT } } }
			NOT = { has_alternate_start_parameter = { key = religion_names value = random } }
		}
		text = EVTDESC_EVER_6204_B
	}
	desc = {
		trigger = { has_alternate_start_parameter = { key = religion_names value = random } }
		text = EVTDESC_MNM_6204_c
	}

	is_triggered_only = yes

	immediate = {
		random_realm_province = {
			limit = {
				NOT = { religion = qisma }
			}
			save_event_target_as = conversion_province
		}
		random_realm_province = {
			limit = {
				owner = { NOT = { religion = qisma } }
				NOT = { religion = qisma }
			}
			save_event_target_as = conversion_province
		}
		random_demesne_province = {
			limit = { NOT = { religion = qisma } }
			save_event_target_as = conversion_province
		}
		event_target:conversion_province = { owner = { save_event_target_as = conversion_province_owner } }
	}

	option = {
		name = ACCEPT

		event_target:conversion_province = {
			set_quest_target = {
				id = quest_the_assassins_convert_province
				holder = ROOT
			}
		}
	}

	option = {
		name = DECLINE
		custom_tooltip = { text = decline_quest_tooltip }

		add_character_modifier = {
			name = quest_cooldown_timer
			hidden = yes
			days = 1000
		}

		ai_chance = { factor = 0 }
	}
}

#The province in question is converted
province_event = {
	id = EVER.6206
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		any_quester_targeting_this = {
			limit = { has_quest = quest_the_assassins_convert_province }
			character_event = { id = EVER.6205 }
		}
	}
}

#character_event = { #Eve,t for clearing quest_the_assassins_convert_province
#    id = EVER.6230
#    hide_window = yes
#    is_triggered_only = yes
#   	trigger = {
#   		FROM = {
#   			tier = COUNT
#   			location = { is_quest_target = yes }
#   			OR = {
#	   			location = {
#	   				any_quester_targeting_this = {
#	   					character = FROMFROM
#	   					NOT = { is_vassal_or_below = ROOT }
#	   					has_quest = quest_the_assassins_convert_province
#	   				}
#	   			}
#	   			location = {
#	   				any_quester_targeting_this = {
#	   					is_vassal_or_below = FROMFROM
#	   					NOR = {
#	   						character = ROOT
#	   						is_vassal_or_below = ROOT
#	   					}
#	   					has_quest = quest_the_assassins_convert_province
#	   				}
#	   			}
#   			}
#   		}
#   	}
#   	immediate = {
#   		FROM = {
#   			location = {
#   				any_quester_targeting_this = {
#		   			limit = {
#		   				OR = {
#		   					AND = {
#		   						character = FROMFROM
#			   					NOT = { is_vassal_or_below = ROOT }
#			   					has_quest = quest_the_assassins_convert_province
#		   					}
#		   					AND = {
#		   						is_vassal_or_below = FROMFROM
#			   					NOR = {
#			   						character = ROOT
#			   						is_vassal_or_below = ROOT
#			   					}
#		   					}
#		   				}
#		   				has_quest = quest_the_assassins_convert_province
#		   			}
#					wealth = 5000
#		   		}
#   			}
#   		}
#   	}
#}

#Mission completion
character_event = {
	id = EVER.6205
	desc = {
		trigger = { NOT = { has_alternate_start_parameter = { key = religion_names value = random } } }
		text = EVTDESC_MNM_6205_A
	}
	desc = {
		trigger = { has_alternate_start_parameter = { key = religion_names value = random } }
		text = EVTDESC_MNM_6205_B
	}
	picture = GFX_evt_imam
	border = GFX_event_normal_frame_religion

	is_triggered_only = yes
	hide_from = yes

	trigger = {
		religion = FROM
	}

	immediate = {
		FROM = { save_event_target_as = conversion_province }
	}

	option = {
		trigger = {
			NOT = { has_alternate_start_parameter = { key = religion_names value = random } }
		}
		name = EVTOPTA_MNM_6205_A
		clr_quest = quest_the_assassins_convert_province
		sound_effect = assassins_convert_province
	}
	option = {
		trigger = {
			has_alternate_start_parameter = { key = religion_names value = random }
		}
		name = EVTOPTA_MNM_6205_B
		clr_quest = quest_the_assassins_convert_province
		sound_effect = assassins_convert_province
	}
}


#MISSION: Occupy infidel holding
character_event = {
	id = EVER.6220
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		FROM = { society_quest_event = { id = EVER.6221 days = 7 random = 7 } }
	}
}

society_quest_event = {
	id = EVER.6221
	desc = EVTDESC_MNM_6221
	quest_target = event_target:infidel_holding

	is_triggered_only = yes

	immediate = {
		random_realm_province = {
			limit = {
				any_neighbor_province = {
					owner = {
						top_liege = {
							NOT = { character = ROOT }
							OR = {
								NOT = { religion_group = qismaite_group }
								AND = {
									NOT = { religion = qisma }
									NOT = { ROOT = { any_realm_province = { any_neighbor_province = { owner = { top_liege = { NOT = { religion_group = qismaite_group } } } } } } }
								}
							}
							any_realm_province = {
								any_province_holding = {
									owner = { NOT = { religion = qisma } }
									OR = {
										holding_type = temple
										holding_type = castle
									}
								}
							}
						}
					}
				}
			}
			random_neighbor_province = {
				limit = {
					owner = {
						top_liege = {
							NOT = { character = ROOT }
							OR = {
								NOT = { religion_group = qismaite_group }
								AND = {
									NOT = { religion = qisma }
									NOT = { ROOT = { any_realm_province = { any_neighbor_province = { owner = { top_liege = { NOT = { religion_group = qismaite_group } } } } } } }
								}
							}
							any_realm_province = {
								owner = { NOT = { religion = qisma } }
								any_province_holding = {
									owner = { NOT = { religion = qisma } }
									OR = {
										holding_type = temple
										holding_type = castle
									}
								}
							}
						}
					}
				}

				owner = {
					top_liege = {
						random_realm_province = {
							limit = {
								any_province_holding = {
									owner = { NOT = { religion = qisma } }
									OR = {
										holding_type = temple
										holding_type = castle
									}
								}
							}
							random_province_holding = {
								limit = {
									owner = { NOT = { religion = qisma } }
									OR = {
										holding_type = temple
										holding_type = castle
									}
								}
								save_event_target_as = infidel_holding #Lowest prio, random holding in neigbor's realm
							}
						}
						random_demesne_province = {
							limit = {
								any_province_holding = {
									owner = { NOT = { religion = qisma } }
									OR = {
										holding_type = temple
										holding_type = castle
									}
								}
							}
							random_province_holding = {
								limit = {
									owner = { NOT = { religion = qisma } }
									OR = {
										holding_type = temple
										holding_type = castle
									}
								}
								save_event_target_as = infidel_holding #Hgihest prio, top liege neigbor's holding
							}
						}
					}
				}
			}
		}
		event_target:infidel_holding = { location = { owner = { save_event_target_as = infidel_holding_owner } } }
		event_target:infidel_holding = { location = { save_event_target_as = infidel_holding_province } }
	}

	option = {
		name = ACCEPT

		event_target:infidel_holding = {
			set_quest_target = {
				id = quest_the_assassins_occupy_holding
				holder = ROOT
			}
		}

		event_target:infidel_holding_owner = {
			set_character_flag = appear_on_option
			clr_character_flag = appear_on_option
		}
	}

	option = {
		name = DECLINE
		custom_tooltip = { text = decline_quest_tooltip }

		add_character_modifier = {
			name = quest_cooldown_timer
			hidden = yes
			days = 1000
		}

		ai_chance = { factor = 0 }
	}
}

#Holding occupied
#character_event = {
#	id = EVER.6222
#	desc = EVTDESC_MNM_6222
#	picture = GFX_evt_magnificent_castle
#	border = GFX_event_normal_frame_intrigue
#
#	trigger = {
#		has_quest = quest_the_assassins_occupy_holding
#		quest_target = { title = FROM }
#	}
#
#	is_triggered_only = yes
#
#	immediate = {
#
#		FROM = {
#			save_event_target_as = infidel_holding
#			owner = { save_event_target_as = infidel_holding_owner }
#		}
#	}
#
#	option = {
#		trigger = {
#			NOT = { has_alternate_start_parameter = { key = religion_names value = random } }
#		}
#		name = EVTOPTA_6028_A
#		clr_quest = quest_the_assassins_occupy_holding
#		sound_effect = assassins_occupy_infidel_holding
#		add_society_currency_medium_effect = yes
#		increase_visibility_effect = yes
#	}
#	option = {
#		trigger = {
#			has_alternate_start_parameter = { key = religion_names value = random }
#		}
#		name = EVTOPTA_6028_B
#		clr_quest = quest_the_assassins_occupy_holding
#		sound_effect = assassins_occupy_infidel_holding
#		add_society_currency_medium_effect = yes
#		increase_visibility_effect = yes
#	}
#}


#MISSION: Train a protege
character_event = {
	id = EVER.6248
	hide_window = yes

	is_triggered_only = yes

	immediate = { FROM = { society_quest_event = { id = EVER.6249 days = 7 random = 7 } } }
}

society_quest_event = {
	id = EVER.6249
	desc = EVTDESC_MNM_6249
	title = quest_the_assassins_protege

	is_triggered_only = yes

	option = {
		name = ACCEPT

		set_quest = quest_the_assassins_protege

		hidden_effect = {
			character_event = { id = EVER.6250 days = 14 random = 60 }
		}
	}

	option = {
		name = DECLINE
		custom_tooltip = { text = decline_quest_tooltip }
		add_character_modifier = {
			name = quest_cooldown_timer
			hidden = yes
			days = 1000
		}
		ai_chance = { factor = 0 }
	}
}

#Choose a child to train / A child is caught trying to pickpocket you
character_event = {
	id = EVER.6250
	picture = GFX_evt_secret_ceremony
	border = GFX_event_normal_frame_intrigue

	is_triggered_only = yes
	hide_new = yes
	hide_from = yes

	portrait = event_target:assassin_protege

	trigger = {
		NOT = { has_character_flag = training_protege }
	}

	immediate = {
		hidden_effect = {
			set_character_flag = training_protege
			if = {
				limit = { has_character_flag = is_using_train_protege_decision }
				event_target:assassin_protege = { save_event_target_as = assassin_protege_1 } #for text purposes
			}
			else = { #Means you got this as a pulse-event
				random_child = {
					limit = {
						is_child_of = ROOT
						age = 12
						is_ruler = no
						is_abroad = no
						NOT = { any_spouse = { is_landed = yes } }
						NOT = { age = 21 }
						NOT = { has_character_flag = assassin_protege_1_flag }
						OR = {
							is_female = no
							has_game_rule = {
								name = gender
								value = all
							}
						}
					}
					set_character_flag = assassin_protege_1_flag
					save_event_target_as = assassin_protege_1
				}
				random_child = {
					limit = {
						is_child_of = ROOT
						age = 12
						is_ruler = no
						is_abroad = no
						NOT = { any_spouse = { is_landed = yes } }
						NOT = { age = 21 }
						NOT = { has_character_flag = assassin_protege_1_flag }
						NOT = { has_character_flag = assassin_protege_2_flag }
						OR = {
							is_female = no
							has_game_rule = {
								name = gender
								value = all
							}
						}
					}
					set_character_flag = assassin_protege_2_flag
					save_event_target_as = assassin_protege_2
				}
				random_child = {
					limit = {
						is_child_of = ROOT
						age = 12
						is_ruler = no
						is_abroad = no
						NOT = { any_spouse = { is_landed = yes } }
						NOT = { age = 21 }
						NOT = { has_character_flag = assassin_protege_1_flag }
						NOT = { has_character_flag = assassin_protege_2_flag }
						NOT = { has_character_flag = assassin_protege_3_flag }
						OR = {
							is_female = no
							has_game_rule = {
								name = gender
								value = all
							}
						}
					}
					set_character_flag = assassin_protege_3_flag
					save_event_target_as = assassin_protege_3
				}

				if = {
					limit = {
						NOR = {
							event_target:assassin_protege_1 = { always = yes }
							event_target:assassin_protege_2 = { always = yes }
							event_target:assassin_protege_3 = { always = yes }
						}
					}
					random_list = {
						10 = {
							modifier = {
								factor = 0
								NOT = {
									has_game_rule = {
										name = gender
										value = all
									}
								}
							}

							create_character = {
								age = 12
								female = yes
								random_traits = yes
								attributes = {
									intrigue = 4
								}
								religion = ROOT
								dynasty = none
								race = ROOT
								culture = ROOT
							}
							new_character = {
								save_event_target_as = assassin_protege
							}
						}
						10 = {
							create_character = {
								age = 12
								female = no
								random_traits = yes
								attributes = {
									intrigue = 4
								}
								religion = ROOT
								dynasty = none
								race = ROOT
								culture = ROOT
							}
							new_character = {
								save_event_target_as = assassin_protege
							}
						}
					}
				}
			}
		}
	}

	desc = {
		text = EVTDESC_MNM_6250_A
		trigger = {
			OR = {
				event_target:assassin_protege_1 = { always = yes }
				event_target:assassin_protege_2 = { always = yes }
				event_target:assassin_protege_3 = { always = yes }
			}
		}
	}
	desc = {
		text = EVTDESC_MNM_6250_B
		trigger = {
			NOR = {
				event_target:assassin_protege_1 = { always = yes }
				event_target:assassin_protege_2 = { always = yes }
				event_target:assassin_protege_3 = { always = yes }
			}
		}
	}

	option = { #Begin training (ONLY for those who used the targeted decision to start this)
		name = EVTOPTA_MNM_6250
		custom_tooltip = { text = EVTOPTA_MNM_6250_TT }


		if = {
			limit = {
				event_target:assassin_protege = { is_child_of = ROOT }
			}
			event_target:assassin_protege = {
				show_scope_change = no
				opinion = {
					who = ROOT
					modifier = opinion_parental_praise
					years = 5
				}
			}
		}
		event_target:assassin_protege = {
			hidden_effect = { character_event = { id = EVER.6251 } } # training ping event
		}
		show_portrait = event_target:assassin_protege

		clr_character_flag = is_using_train_protege_decision

		trigger = {
			has_character_flag = is_using_train_protege_decision
		}
	}

	option = { #Choose random child 1
		name = EVTOPTA_MNM_6250
		custom_tooltip = { text = EVTOPTA_MNM_6250_TT }

		event_target:assassin_protege_1 = {
			opinion = {
				who = ROOT
				modifier = opinion_parental_praise
				years = 5
			}
			save_event_target_as = assassin_protege
			hidden_effect = { character_event = { id = EVER.6251 } } # training ping event
		}
		hidden_effect = {
			event_target:assassin_protege_2 = {
				clr_character_flag = assassin_protege_2_flag
			}
			event_target:assassin_protege_3 = {
				clr_character_flag = assassin_protege_3_flag
			}
		}
		trigger = {
			any_child = {
				is_child_of = ROOT
				has_character_flag = assassin_protege_1_flag
			}
		}
	}
	option = { #Choose random child 2
		name = EVTOPTB_MNM_6250
		custom_tooltip = { text = EVTOPTB_MNM_6250_TT }

		event_target:assassin_protege_2 = {
			opinion = {
				who = ROOT
				modifier = opinion_parental_praise
				years = 5
			}
			save_event_target_as = assassin_protege
			hidden_effect = { character_event = { id = EVER.6251 } } # training ping event
		}
		hidden_effect = {
			event_target:assassin_protege_1 = {
				clr_character_flag = assassin_protege_1_flag
			}
			event_target:assassin_protege_3 = {
				clr_character_flag = assassin_protege_3_flag
			}
		}
		trigger = {
			any_child = {
				is_child_of = ROOT
				has_character_flag = assassin_protege_2_flag
			}
		}
	}
	option = { #Choose random child 3
		name = EVTOPTC_MNM_6250
		custom_tooltip = { text = EVTOPTC_MNM_6250_TT }

		event_target:assassin_protege_3 = {
			opinion = {
				who = ROOT
				modifier = opinion_parental_praise
				years = 5
			}
			save_event_target_as = assassin_protege
			hidden_effect = { character_event = { id = EVER.6251 } } # training ping event
		}
		hidden_effect = {
			event_target:assassin_protege_1 = {
				clr_character_flag = assassin_protege_1_flag
			}
			event_target:assassin_protege_2 = {
				clr_character_flag = assassin_protege_2_flag
			}
		}
		trigger = {
			any_child = {
				is_child_of = ROOT
				has_character_flag = assassin_protege_3_flag
			}
		}
	}
	option = { # Take the child under your wing
		name = EVTOPTD_MNM_6250
		custom_tooltip = { text = EVTOPTD_MNM_6250_TT }
		set_character_flag = apprentice_is_not_bloodrelation

		event_target:assassin_protege = {
			opinion = {
				who = ROOT
				modifier = opinion_was_shown_mercy
				years = 5
			}
			hidden_effect = { character_event = { id = EVER.6251 } } # training ping event
		}
		trigger = {
			NOR = {
				event_target:assassin_protege_1 = { always = yes }
				event_target:assassin_protege_2 = { always = yes }
				event_target:assassin_protege_3 = { always = yes }
			}
		}
	}
	option = { #Imprison the urchin!
		name = EVTOPTE_MNM_6250
		custom_tooltip = { text = EVTOPTE_MNM_6250_TT }

		clr_quest = { id = quest_the_assassins_protege failure = yes }

		hidden_effect = {
			event_target:assassin_protege = {
				imprison = ROOT
			}
		}
		trigger = {
			NOR = {
				event_target:assassin_protege_1 = { always = yes }
				event_target:assassin_protege_2 = { always = yes }
				event_target:assassin_protege_3 = { always = yes }
			}
		}
	}
	option = { # You are busy right now
		name = EVTOPTF_MNM_6250
		custom_tooltip = { text = EVTOPTF_MNM_6250_TT }

		clr_quest = { id = quest_the_assassins_protege failure = yes }

		hidden_effect = {
			any_child = {
				clr_character_flag = assassin_protege_1_flag
				clr_character_flag = assassin_protege_2_flag
				clr_character_flag = assassin_protege_3_flag
			}
		}
		trigger = {
			any_child = {
				is_child_of = ROOT
				has_character_flag = assassin_protege_1_flag
			}
		}
	}
}

character_event = { # ping event
	id = EVER.6251

	is_triggered_only = yes
	hide_window = yes

	option = {
		clr_character_flag = assassin_protege_1_flag
		clr_character_flag = assassin_protege_2_flag
		clr_character_flag = assassin_protege_3_flag
		set_quest_target = {
	        id = quest_the_assassins_protege
	        society = everlasting
	        holder = FROM
		}
		hidden_effect = { FROM = { character_event = { id = EVER.6252 days = 60 random = 20 } } } # specialization event
	}
}

character_event = { # choose specialization for kid
	id = EVER.6252
	desc = EVTDESC_MNM_6252
	picture = GFX_evt_shady_meeting
	border = GFX_event_normal_frame_intrigue

	portrait = event_target:assassin_protege

	trigger = { has_character_flag = training_protege }

	is_triggered_only = yes

	option = {
		name = EVTOPTA_MNM_6252
		custom_tooltip = { text = EVTOPTA_MNM_6252_TT }
		set_character_flag = chose_intrigue_focus

		hidden_effect = { character_event = { id = EVER.6253 days = 90 random = 60 } } # intrigue focus
	}
	option = {
		name = EVTOPTB_MNM_6252
		custom_tooltip = { text = EVTOPTB_MNM_6252_TT }
		set_character_flag = chose_martial_focus

		hidden_effect = { character_event = { id = EVER.6253 days = 90 random = 60 } } # martial focus
	}
	option = {
		name = EVTOPTC_MNM_6252
		custom_tooltip = { text = EVTOPTC_MNM_6252_TT }
		set_character_flag = chose_even_focus

		hidden_effect = { character_event = { id = EVER.6253 days = 90 random = 60 } } # even focus
	}
}

character_event = { # they are hard at work and time has come for a test
	id = EVER.6253
	picture = GFX_evt_shady_meeting
	border = GFX_event_normal_frame_intrigue

	portrait = event_target:assassin_protege

	trigger = {
		has_character_flag = training_protege
	}

	is_triggered_only = yes

	desc = {
		trigger = {	has_character_flag = chose_intrigue_focus }
		text = EVTDESC_MNM_6253_A
	}
	desc = {
		trigger = {	has_character_flag = chose_martial_focus }
		text = EVTDESC_MNM_6253_B
	}
	desc = {
		trigger = {	has_character_flag = chose_even_focus }
		text = EVTDESC_MNM_6253_C
	}

	option = {
		name = EVTOPTA_MNM_6253
		custom_tooltip = { text = EVTOPTA_MNM_6253_TT }

		if = {
			limit = { has_character_flag = chose_intrigue_focus }
			event_target:assassin_protege = {
				add_trait_deceitful_effect = yes
				remove_trait_honest_effect = yes
			}
		}
		if = {
			limit = { has_character_flag = chose_martial_focus }
			event_target:assassin_protege = {
				add_trait_brave_effect = yes
				remove_trait_craven_effect = yes
			}
		}
		if = {
			limit = { has_character_flag = chose_even_focus }
			event_target:assassin_protege = {
				add_trait_diligent_effect = yes
				remove_trait_slothful_effect = yes
			}
		}

		hidden_effect = {
			random_list = {
				10 = {
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { martial = 3 }
					}
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { martial = 4 }
					}
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { martial = 5 }
					}
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { martial = 6 }
					}
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { martial = 7 }
					}
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { martial = 8 }
					}
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { martial = 9 }
					}
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { martial = 10 }
					}
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { intrigue = 3 }
					}
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { intrigue = 4 }
					}
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { intrigue = 5 }
					}
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { intrigue = 6 }
					}
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { intrigue = 7 }
					}
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { intrigue = 8 }
					}
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { intrigue = 9 }
					}
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { intrigue = 10 }
					}
					modifier = {
						factor = 1.1
						event_target:assassin_protege = { trait = deceitful }
					}
					modifier = {
						factor = 1.5
						event_target:assassin_protege = {
							is_smart_trigger = yes
						}
					}
					character_event = { id = EVER.6254 days = 5 } # good outcome 1
				}
				10 = {
					character_event = { id = EVER.6255 days = 5 } # mediocre outcome 1
				}
				5 = {
					modifier = {
						factor = 10
						event_target:assassin_protege = {
							is_dumb_trigger = yes
						}
					}
					character_event = { id = EVER.6256 days = 5 } # bad outcome 1
				}
			}
		}

		trigger = {	has_character_flag = chose_intrigue_focus }
	}
}

character_event = { # good outcome
	id = EVER.6254
	picture = GFX_evt_secret_ceremony
	border = GFX_event_normal_frame_intrigue

	portrait = event_target:assassin_protege

	hide_from = yes

	trigger = { has_character_flag = training_protege }

	is_triggered_only = yes

	desc = {
		trigger = {	has_character_flag = chose_intrigue_focus }
		text = EVTDESC_MNM_6254_A
	}
	desc = {
		trigger = {	has_character_flag = chose_martial_focus }
		text = EVTDESC_MNM_6254_B
	}
	desc = {
		trigger = {	has_character_flag = chose_even_focus }
		text = EVTDESC_MNM_6254_C
	}

	option = {
		name = EVTOPTA_MNM_6254
		custom_tooltip = { text = EVTOPTA_MNM_6254_TT }
		set_character_flag = apprentice_did_great
		character_event = { id = EVER.6261 days = 25 }
	}
}

character_event = { # mediocre outcome
	id = EVER.6255
	picture = GFX_evt_secret_ceremony
	border = GFX_event_normal_frame_intrigue

	hide_from = yes

	portrait = event_target:assassin_protege

	trigger = { has_character_flag = training_protege }

	is_triggered_only = yes

	desc = {
		trigger = {	has_character_flag = chose_intrigue_focus }
		text = EVTDESC_MNM_6255_A
	}
	desc = {
		trigger = {	has_character_flag = chose_martial_focus }
		text = EVTDESC_MNM_6255_B
	}
	desc = {
		trigger = {	has_character_flag = chose_even_focus }
		text = EVTDESC_MNM_6255_C
	}

	option = {
		name = EVTOPTA_MNM_6255
		custom_tooltip = { text = EVTOPTA_MNM_6255_TT }
		set_character_flag = apprentice_did_ok

		event_target:assassin_protege = {
			add_maimed_trait_effect = yes
		}

		character_event = { id = EVER.6261 days = 25 }
	}
}

character_event = { # bad outcome
	id = EVER.6256
	desc = EVTDESC_MNM_6256
	picture = GFX_evt_assassination
	border = GFX_event_normal_frame_intrigue

	portrait = event_target:assassin_protege

	hide_from = yes

	has_character_flag = training_protege

	is_triggered_only = yes

	option = {
		name = EVTOPTA_MNM_6256
		custom_tooltip = { text = EVTOPTA_MNM_6256_TT }
		set_character_flag = apprentice_failed_miserably

		event_target:assassin_protege = {
			death = { death_reason = death_murder_unknown killer = ROOT }
		}

		character_event = { id = EVER.6259 days = 10 }

		trigger = {
			event_target:assassin_protege = {
				NOT = { is_child_of = ROOT }
			}
		}
	}
	option = {
		name = EVTOPTB_MNM_6256
		custom_tooltip = { text = EVTOPTB_MNM_6256_TT }
		set_character_flag = apprentice_failed_miserably
		character_event = { id = EVER.6259 days = 10 }

		event_target:assassin_protege = {
			death = { death_reason = death_murder_unknown killer = ROOT }
		}

		trigger = {
			event_target:assassin_protege = {
				is_child_of = ROOT
			}
		}
	}
}

character_event = { # clean-up after training apprentice
	id = EVER.6257

	is_triggered_only = yes
	hide_window = yes

	option = {
		if = { limit = { event_target:assassin_protege = { true_religion_qisma_trigger = no } }
			custom_tooltip = { text = 6252_CONVERT_APPRENTICE_TT }
			event_target:assassin_protege = {
				character_event = { id = EVER.6258 } # convert
			}
		}
		event_target:assassin_protege = { clr_character_flag = show_picture_in_option }
		clr_character_flag = training_protege
		clr_character_flag = chose_intrigue_focus
		clr_character_flag = chose_martial_focus
		clr_character_flag = chose_even_focus
		clr_character_flag = apprentice_is_not_bloodrelation
		clr_character_flag = apprentice_did_great
		clr_character_flag = apprentice_did_ok
		clr_character_flag = apprentice_failed_miserably
	}
}

character_event = { # Conversion event (for apprentice) if they are not already Shia (sent from EVER.6052)
	id = EVER.6258
	desc = EVTDESC_MNM_6258
	picture = GFX_evt_secret_ceremony
	border = GFX_event_normal_frame_intrigue

	trigger = {
		event_target:assassin_protege = { is_alive = yes }
		true_religion_qisma_trigger = no
		is_immune_to_conversion_trigger = no
	}

	is_triggered_only = yes

	option = { #I (apprentice)  will convert
		name = EVTOPTA_MNM_6258

		religion = qisma

		ai_chance = {
			factor = 20

			modifier = {
				true_religion_qisma_trigger = yes
				factor = 2
			}
			modifier = {
				independent = yes
				factor = 2
			}
			modifier = {
				trait = brave
				factor = 2
			}
			modifier = {
				trait = honest
				factor = 2
			}
		}
	}
	option = { # I (apprentice) will convert, secretly
		name = EVTOPTB_MNM_6258

		clear_secret_religion = yes
		set_secret_religion = qisma

		ai_chance = {
			factor = 80
			modifier = {
				trait = craven
				factor = 2
			}
			modifier = {
				trait = deceitful
				factor = 2
			}
		}
	}
}

character_event = { # Final talk with apprentice
	id = EVER.6259
	picture = GFX_evt_secret_ceremony
	border = GFX_event_normal_frame_intrigue

	hide_from = yes

	portrait = event_target:assassin_protege

	has_character_flag = training_protege

	is_triggered_only = yes

	immediate = {
		if = {
			limit = { has_character_flag = apprentice_failed_miserably }
			clr_character_flag = training_protege #to block extra fallback spam
		}
	}

	desc = {
		trigger = {
			has_character_flag = apprentice_did_great
			event_target:assassin_protege = { true_religion_qisma_trigger = yes }
		}
		text = EVTDESC_MNM_6259_A # apprentice is a fine example and already a believer
	}
	desc = {
		trigger = {
			has_character_flag = apprentice_did_ok
			event_target:assassin_protege = { true_religion_qisma_trigger = yes }
		}
		text = EVTDESC_MNM_6259_B # Apprentice has done alright, all things considered
	}
	desc = {
		trigger = {
			has_character_flag = apprentice_failed_miserably
			event_target:assassin_protege = { true_religion_qisma_trigger = yes }
		}
		text = EVTDESC_MNM_6259_C # believer apprentice is dead, I might train a new one?
	}
	desc = {
		trigger = {
			has_character_flag = apprentice_did_great
			event_target:assassin_protege = { true_religion_qisma_trigger = no }
		}
		text = EVTDESC_MNM_6259_D # apprentice is a fine example and already a believer
	}
	desc = {
		trigger = {
			has_character_flag = apprentice_did_ok
			event_target:assassin_protege = { true_religion_qisma_trigger = no }
		}
		text = EVTDESC_MNM_6259_E # Apprentice has done alright, all things considered AND will convert
	}
	desc = {
		trigger = {
			has_character_flag = apprentice_failed_miserably
			event_target:assassin_protege = { true_religion_qisma_trigger = no }
		}
		text = EVTDESC_MNM_6259_F # to-be-converted apprentice is dead, I might train a new one?
	}


	option = {
		name = EVTOPTA_MNM_6259 # Great!
		clr_quest = quest_the_assassins_protege
		sound_effect = assassins_train_protege
		add_society_currency_medium_effect = yes
		hidden_effect = { character_event = { id = EVER.6257 } } # clean up
		event_target:assassin_protege = { set_character_flag = show_picture_in_option }

		if = { limit = { event_target:assassin_protege = { true_religion_qisma_trigger = no } }
			custom_tooltip = { text = 6252_CONVERT_APPRENTICE_TT_2 }
			event_target:assassin_protege = {
				character_event = { id = EVER.6258 } # convert
			}
		}
		event_target:assassin_protege = {
			clr_character_flag = show_picture_in_option
			set_character_flag = was_trained_as_assassin_protege
		}
		trigger = {	has_character_flag = apprentice_did_great }
	}

	option = {
		name = EVTOPTB_MNM_6259 # OK
		clr_quest = quest_the_assassins_protege
		sound_effect = assassins_train_protege
		add_society_currency_minor_effect = yes
		hidden_effect = { character_event = { id = EVER.6257 } } # clean up
		event_target:assassin_protege = { set_character_flag = show_picture_in_option }
		if = { limit = { event_target:assassin_protege = { true_religion_qisma_trigger = no } }
			custom_tooltip = { text = 6252_CONVERT_APPRENTICE_TT_2 }
			event_target:assassin_protege = {
				character_event = { id = EVER.6258 } # convert
			}
		}
		event_target:assassin_protege = {
			clr_character_flag = show_picture_in_option
			set_character_flag = was_trained_as_assassin_protege
		}
		trigger = {	has_character_flag = apprentice_did_ok }
	}

	option = {
		name = EVTOPTC_MNM_6259 # Typical
		clr_quest = { id = quest_the_assassins_protege failure = yes }
		hidden_effect = { character_event = { id = EVER.6257 } } # clean up
		event_target:assassin_protege = { set_character_flag = show_picture_in_option }
		event_target:assassin_protege = { clr_character_flag = show_picture_in_option }
		trigger = {	has_character_flag = apprentice_failed_miserably }
	}
}


#character_event = { # Fallback - apprentice has died somehow during chain
#	id = EVER.6260
#	picture = GFX_evt_secret_ceremony
#	border = GFX_event_normal_frame_intrigue
#
#	has_character_flag = training_protege
#
#	is_triggered_only = yes
#
#	desc = {
#		trigger = { NOT = { has_character_flag = apprentice_is_not_bloodrelation } }
#		text = EVTDESC_MNM_6260_A
#	}
#	desc = {
#		trigger = { has_character_flag = apprentice_is_not_bloodrelation }
#		text = EVTDESC_MNM_6260_B
#	}
#
#
#	option = {
#		name = EVTOPTA_MNM_6260 # Drat
#		clr_quest = { id = quest_the_assassins_protege failure = yes }
#		hidden_effect = { character_event = { id = EVER.6257 } } # clean up
#	}
#}

character_event = { #Fallback doublecheck - apprentice died before the Assassins could be notified of the success (leads to fail of mission)
    id = EVER.6261
    hide_window = yes

	has_character_flag = training_protege

    is_triggered_only = yes

    immediate = {
    	if = {
    		limit = { event_target:assassin_protege = { is_alive = yes } }
    		character_event = { id = EVER.6259 }
    	}
    }
}
