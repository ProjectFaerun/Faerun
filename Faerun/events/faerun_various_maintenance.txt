namespace = frmaint

# regular pruning of long-lived useless courtiers, because the game doesn't seem to prune characters flagged as immortals natively
character_event = {
	id = frmaint.1
	hide_window = yes
	is_triggered_only = yes # on_decade_pulse

	ai = yes
	min_age = 50
	prisoner = no
	has_job_title = no

	trigger = {
		immortal = yes
		is_ruler = no
		has_minor_title = no
		historical = no
		num_of_claims == 0
		is_consort = no
		liege = {
			trigger_if = {
				limit = { ai = no }

				free_court_slots <= -30
			}
			trigger_else = {
				num_of_courtiers > 15
			}
			NOT = { is_close_relative = ROOT }
		}
		trigger_if = {
			limit = { is_in_society = yes }

			society_rank < 3
		}
		NOR = {
			obedient = liege # in case the character is a summoned planar creature or something
			trait = avatar
			trait = archfiend
			trait = stasis_clone # they should persist at least until stasis ends
			any_spouse = {
				is_playable = yes
			}
			any_lover = {
				is_playable = yes
			}
			any_friend = {
				is_playable = yes
			}
			any_rival = {
				is_playable = yes
			}
			any_player = {
				ROOT = { is_important_character_to = PREV }
			}
			any_artifact = { # holders of unique artifacts should persist
				OR = {
					is_indestructible = yes
					has_artifact_flag = unique
					quality >= 5
				}
			}
			evilcat_is_chosen = yes
		}
	}

	immediate = {
		random = {
			chance = 50
			additive_modifier = {
				value = 25

				liege = {
					num_of_courtiers >= 25
				}
			}
			additive_modifier = {
				value = 25

				liege = {
					num_of_courtiers >= 35
				}
			}
			mult_modifier = {
				factor = 0.5

				is_lowborn = no
				liege = { dynasty = ROOT }
			}
			mult_modifier = {
				factor = 0.5

				ai = no
			}
			
			if = {
				limit = { 
					num_of_children == 0
					is_married = no
					NOR = {
						mother = { always = yes }
						father = { always = yes }
					}
				}

				add_trait = absent
				character_event = { id = absent.1 }
			}
			else = {
				random_list = {
					600 = {
						trigger = {
							is_sick_or_injured_trigger = yes
							is_true_immortal = no
						}
	
						death = {
							death_reason = death_trait
						}
					}
					200 = {
						trigger = {
							is_old_enough_to_die_trigger = yes
						}
	
						death = {
							death_reason = death_longlived
						}
					}
					100 = {
						trigger = {
							trait = depressed
							is_true_immortal = no
						}

						random_list = {
							20 = {
								death = { death_reason = death_suicide_drowning }
							}
							20 = {
								death = { death_reason = death_suicide_fall }
							}
							20 = {
								death = { death_reason = death_suicide_hanging }
							}
							20 = {
								death = { death_reason = death_suicide_poison }
							}
						}
					}
					100 = {
						trigger = {
							trait = adventurer
						}

						simulate_duel_injury_fatal_effect = yes
						death = {
							death_reason = death_adventuring
						}
					}
					600 = {
						trigger = {
							OR = {
								is_true_outsider = yes
								z_legendary_arcane = yes
							}
						}
						
						death = {
							death_reason = death_planes
						}
					}
					200 = {
						trigger = {
							OR = {
								is_undead = yes
								trigger_if = {
									limit = { trait = wiz_necromancy }

									is_evil_religion = yes
								}
							}
						}

						death = {
							death_reason = death_ravenloft
						}
					}
					20 = {
						random_accident_death_effect = yes
					}
				}
			}
		}
	}
}

character_event = { # Sets various story flags
	id = frmaint.2
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_save_game = no
	}

	immediate = {
		#Can't be trigger switch because it's not a case of only one possible option
		if = {
			limit = {
				date = 1.1.1
			}
			set_global_flag = spellplague_not_happened_yet
			set_global_flag = voice_of_telos_not_spawned_yet
			#Historical artifacts
			set_global_flag = twinned_crown_of_yarlith_found
			set_global_flag = twinned_crown_of_uthtower_found
		}
		if = {
			limit = {
				date = 611.1.1
			}
			clr_global_flag = twinned_crown_of_yarlith_found #means it's now missing
		}
		if = {
			limit = {
				date = 615.1.1
			}
			clr_global_flag = twinned_crown_of_uthtower_found #means it's now missing
		}
		if = {
			limit = {
				date = 794.1.1
			}
			set_global_flag = peacock_throne_created # none of it exists before this date
		}
		if = {
			limit = {
				date = 796.1.1
			}
			set_global_flag = found_loregiver_lore # enable the Grand Caliphate decision
		}
		if = {
			limit = {
				date = 797.1.1
			}
			set_global_flag = grand_caliphate_first_established
		}
		if = {
			limit = {
				date = 800.1.1
			}
			set_global_flag = peacock_throne_shattered # canopy goes missing
		}
		if = {
			limit = {
				date >= 1159.1.1
			}
			c_53001 = { #Szass Tam
				add_character_modifier = { name = true_villain_modifier years = 10 }
			}
		}
		if = { # initiates the plot driving variables
			limit = {
				date = 1281.1.1
			}
			set_variable = { which = global_counter_baator value = 1000 }
			set_variable = { which = global_counter_dragon value = 1000 }
			set_variable = { which = global_counter_divine value = 1000 }
			set_variable = { which = global_counter_trivir value = 1000 }
			set_variable = { which = global_counter_shadow value = 1000 }
		}
		if = {
			limit = {
				date >= 1300.1.1
			}
			c_56001 = { #Manshoon
				add_character_modifier = { name = true_villain_modifier years = 10 }
			}
		}
		if = {
			limit = {
				date = 1354.10.1
			}
			set_global_flag = zariel_fallen
		}
		if = { # review when we move the start date earlier
			limit = {
				date = 1357.1.1
			}
			if = {
				limit = {
					NOT = { date = 1369.1.1 }
					c_30550 = {
						ai = yes
						is_alive = yes
					}
				}
				c_30550 = {
					add_weak_claim = c_mithral_hall
				}
			}
			if = {
				limit = {
					NOT = { year = 1368 }
					c_61358 = {
						is_alive = yes
					}
				}
				c_61358 = {
					set_variable = { which = veladv value = 0 }
					add_character_modifier = {
						name = veladvmod
						duration = -1
					}
				}
			}
		}
		if = {
			limit = {
				date = 1357.7.1
			}
			set_global_flag = maalthiir_coup
		}
		if = {
			limit = {
				date = 1358.1.1
			}
			set_global_flag = moander_rampaged
		}
		if = {
			limit = {
				date = 1358.2.1
			}
			set_global_flag = tot_start
			set_global_flag = waukeen_gone
		}
		if = {
			limit = {
				date = 1358.8.13
			}
			set_global_flag = bane_dead
		}
		if = {
			limit = {
				date = 1358.9.16
			}
			set_global_flag = bhaal_dead
		}
		if = {
			limit = {
				date = 1358.10.15
			}
			clr_global_flag = tot_start
			set_global_flag = tot_ended
			set_global_flag = myrkul_dead
		}
		if = {
			limit = {
				date = 1358.12.1
			}
			set_global_flag = leira_dead
		}
		if = {
			limit = {
				date = 1361.7.1
			}
			set_global_flag = maztica_opened
		}
		if = {
			limit = {
				date >= 1362.1.1
			}
			c_120 = { #Acerak
				add_character_modifier = { name = true_villain_modifier years = 10 }
			}
		}
		if = {
			limit = {
				date = 1365.1.1
			}
			set_global_flag = twinned_crown_of_yarlith_found
		}
		if = {
			limit = {
				date = 1367.8.1
			}
			set_global_flag = greneire_spawned
		}
		if = {
			limit = {
				date = 1368.1.1
			}
			set_global_flag = velsharoon_god
		}
		if = {
			limit = {
				date = 1368.12.1
			}
			set_global_flag = kelemvor_god
		}
		if = {
			limit = {
				date = 1369.1.1
			}
			set_global_flag = caelar_argent_spawned
			set_global_flag = obould_chosen
		}
		if = {
			limit = {
				date = 1369.6.1
			}
			set_global_flag = refused_bhaal
		}
		if = {
			limit = {
				date = 1370.1.1
			}
			set_global_flag = daemonfey_released
			set_global_flag = wyrmskull_throne_found
			clr_global_flag = waukeen_gone
			set_global_flag = waukeen_returned
		}
		if = {
			limit = {
				date = 1371.3.1
			}
			set_global_flag = nalavara_spawned
		}
		if = {
			limit = {
				date = 1372.1.1
			}
			set_global_flag = shadovar_spawned
		}
		if = {
			limit = {
				date = 1372.2.1
			}
			clr_global_flag = bane_dead
			set_global_flag = bane_returned
			set_global_flag = xvim_dead
		}
		if = {
			limit = {
				date = 1373.12.28
			}
			set_global_flag = tchazzar_spawned
		}
		if = {
			limit = {
				date = 1374.1.1
			}
			set_global_flag = mephistopheles_spawned
			set_global_flag = risen_sun
		}
		if = {
			limit = {
				date = 1374.3.1
			}
			set_global_flag = wenderkazoo_found
		}
		if = {
			limit = {
				date = 1374.4.1
			}
			set_global_flag = king_of_shadows_spawned
		}
		if = {
			limit = {
				date = 1374.11.30
			}
			set_global_flag = rhymanthiin_founded
		}
		if = {
			limit = {
				date = 1374.12.1
			}
			set_global_flag = mask_dead
		}
		if = {
			limit = {
				date = 1383.1.1
			}
			set_global_flag = fzoul_god
		}
		if = {
			limit = {
				date = 1384.1.1
			}
			set_global_flag = helm_dead
		}
		if = {
			limit = {
				date = 1385.4.29
			}
			clr_global_flag = spellplague_not_happened_yet
			set_global_flag = spellplague_happened
			set_global_flag = savras_dead
			set_global_flag = mystra_dead
		}
		if = {
			limit = {
				date = 1385.9.15
			}
			set_global_flag = tam_won_thay_war
		}
		if = {
			limit = {
				date = 1385.11.1
			}
			set_global_flag = lathander_gone
		}
		if = {
			limit = {
				date = 1409.1.1
			}
			set_global_flag = obould_god
		}
		if = {
			limit = {
				date = 1424.1.1
			}
			set_global_flag = tyr_dead
		}
		if = {
			limit = {
				date = 1425.1.1
			}
			set_global_flag = velsharoon_dead
		}
		if = {
			limit = {
				date = 1430.1.1
			}
			clr_global_flag = voice_of_telos_not_spawned_yet
			set_global_flag = voice_of_telos_spawned
		}
		if = {
			limit = {
				date = 1442.2.1 # Not 1444 as recorded, but 50 years before 'Descent into Avernus' and BG3
			}
			set_global_flag = companion_created
		}
		if = {
			limit = {
				date = 1479.1.1
			}
			clr_global_flag = mystra_dead
		}
		if = {
			limit = {
				date = 1482.5.1
			}
			clr_global_flag = bhaal_dead
			set_global_flag = return_of_bhaal
		}
		if = {
			limit = {
				date = 1484.1.1
			}
			clr_global_flag = mask_dead
		}
		if = {
			limit = {
				date = 1486.1.1
			}
			clr_global_flag = lathander_gone
			set_global_flag = lathander_returns
		}
		if = {
			limit = {
				date = 1487.1.1
			}
			clr_global_flag = helm_dead
			clr_global_flag = tyr_dead
			clr_global_flag = leira_dead
			clr_global_flag = velsharoon_dead
			clr_global_flag = savras_dead
			clr_global_flag = myrkul_dead
			clr_global_flag = xvim_dead
		}
		if = {
			limit = {
				date = 1488.1.1
			}
			set_global_flag = second_sundering_over
		}
		if = {
			limit = {
				date = 1492.2.1
			}
			set_global_flag = zariel_spawned # stop her invading when she's already here
		}
		if = {
			limit = {
				date = 1492.9.1
			}
			clr_global_flag = zariel_fallen # like Idle Champions, we currently assume she's redeemed
			clr_global_flag = zariel_spawned
			clr_global_flag = companion_created
		}
	}

	after = {
		# Bhaalspawn counter
		set_variable = {
			which = global_bhaalspawn_count
			value = 0
		}
		any_character = {
			limit = {
				trait = bhaalspawn
			}
			change_variable = { 
				which = global_bhaalspawn_count 
				value = 1
			}
			character_event = { id = frstory.0 }
		}

		1 = { # Waterdeep
			province_event = { id = frmaint.30 }
			province_event = { id = rollofyears.2 }
		}
	}
}

character_event = { #add undead_province mod
	id = frmaint.3
	hide_window = yes
	is_triggered_only = yes

	only_playable = yes
	has_character_flag = undead_court

	trigger = {
		is_landed = yes
		higher_tier_than = BARON
		OR = {
			is_undead = yes
			trait = wiz_necromancy
		}
	}

	immediate = {
		any_demesne_province = {
			religion = ROOT
			add_province_modifier = {
				name = undead_province
				duration = -1
			}
		}
		add_character_modifier = {
			name = undead_realm_lord
			duration = -1
		}
		change_variable = {
			which = global_counter_trivir # this pleases Myrkul
			value = 1
		}
	}
}

character_event = { #remove undead_province mod
	id = frmaint.4
	hide_window = yes
	is_triggered_only = yes

	only_playable = yes

	trigger = {
		is_landed = yes
		any_demesne_province = {
			has_province_modifier = undead_province
		}
		higher_tier_than = BARON
		NOT = { has_character_flag = undead_court }
		NOT = { has_character_modifier = undead_realm_lord }
		NAND = {
			is_undead = yes
			top_liege = {
				has_character_modifier = undead_realm_lord
			}
		}
	}

	immediate = {
		any_demesne_province = {
			limit = {
				has_province_modifier = undead_province
			}
			religion = ROOT
			remove_province_modifier = undead_province
			set_variable = { which = prosperity_value value = 0 }
			if = {
				limit = {
					has_province_modifier = prosperity_modifier_3
				}
				remove_province_modifier = prosperity_modifier_3
			}
			if = {
				limit = {
					has_province_modifier = prosperity_modifier_2
				}
				remove_province_modifier = prosperity_modifier_2
			}
			if = {
				limit = {
					has_province_modifier = prosperity_modifier_1
				}
				remove_province_modifier = prosperity_modifier_1
			}
			if = {
				limit = {
					has_province_modifier = depopulated_1
				}
				remove_province_modifier = depopulated_1
			}
			if = {
				limit = {
					has_province_modifier = depopulated_2
				}
				remove_province_modifier = depopulated_2
			}
			add_province_modifier = {
				name = depopulated_3
				duration = -1
			}
		}
	}
}

character_event = { # Is a placeholder workaround
	id = frmaint.5
	hide_window = yes
	is_triggered_only = yes

	only_rulers = yes

	trigger = {
		NOT = { tier = BARON }
		any_demesne_title = {
			has_law = succ_open_elective
		}
	}

	immediate = {
		any_demesne_title = {
			limit = {
				has_law = succ_open_elective
			}
			primary_title = {
				PREV = {
					copy_title_laws = PREV
				}
			}
		}
	}
}

character_event = { # Is a placeholder workaround
	id = frmaint.6
	hide_window = yes
	is_triggered_only = yes

	only_rulers = yes

	trigger = {
		NOT = { tier = baron }
		is_landed = yes
		capital_holding = {
			holding_type = temple
		}
		NOR = {
			government = muslim_government
			government = theocracy_government
			government = divine_feudal_government
			government = yikaria_government
		}
	}

	immediate = {
		if = {
			limit = {
				is_government_potential = muslim_government
			}
			set_government_type = muslim_government
		}
		else_if = {
			limit = {
				is_government_potential = divine_feudal_government
			}
			set_government_type = divine_feudal_government
		}
		else_if = {
			limit = {
				NOR = {
					is_government_potential = muslim_government
					is_government_potential = divine_feudal_government
				}
			}
			set_government_type = theocracy_government
		}
	}
}

# Hidden strength initialization
character_event = {
	id = frmaint.7
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		any_character = {
			limit = {
				OR = {
					trait = vampire
					trait = vampire_spawn
					trait = werewolf
					trait = wererat
					trait = weretiger
					trait = werecrocodile
					society_member_of = eldreth_veluuthra
					society_member_of = everlasting
				}
				NOT = { has_character_modifier = hidden_strength }
			}
			update_hidden_modifiers = yes
		}
	}
}

# Hidden strength refresh
character_event = {
	id = frmaint.8
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		update_hidden_modifiers = yes
	}
}

character_event = {
	id = frmaint.9
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		primary_title = {
			FROM = {
				copy_title_laws = PREV
			}
		}
	}
}

character_event = {
	id = frmaint.12
	hide_window = yes
	is_triggered_only = yes
	
	is_patrician = yes

	trigger = {
		family_palace = {
			has_law = agnatic_succession
		}
		liege = {
			is_merchant_republic = yes
			any_demesne_title = {
				is_merchant_republic = yes
				NOT = { has_law = agnatic_succession }
			}
		}
	}

	immediate = {
		if = {
			limit = {
				liege = {
					is_merchant_republic = yes
					any_demesne_title = {
						is_merchant_republic = yes
						has_law = cognatic_succession
					}
				}
			}
			family_palace = {
				add_law = cognatic_succession
			}
		}
		else_if = {
			limit = {
				liege = {
					is_merchant_republic = yes
					any_demesne_title = {
						is_merchant_republic = yes
						has_law = true_cognatic_succession
					}
				}
			}
			family_palace = {
				add_law = true_cognatic_succession
			}
		}
		else_if = {
			limit = {
				liege = {
					is_merchant_republic = yes
					any_demesne_title = {
						is_merchant_republic = yes
						has_law = enatic_cognatic_succession
					}
				}
			}
			family_palace = {
				add_law = enatic_cognatic_succession
			}
		}
		else_if = {
			limit = {
				liege = {
					is_merchant_republic = yes
					any_demesne_title = {
						is_merchant_republic = yes
						has_law = enatic_succession
					}
				}
			}
			family_palace = {
				add_law = enatic_succession
			}
		}
	}
}

character_event = {
	id = frmaint.13
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_law = agnatic_succession
		has_law = succ_gavelkind
	}

	immediate = {
		if = {
			limit = {
				OR = {
					religion = orc_pantheon
					has_religion_feature = religion_patriarchal
					has_religion_feature = religion_matriarchal
				}
				FROM = { NOT = { tier = baron } }
			}
			FROM = { add_law = succ_turkish_succession }
		}

		if = {
			limit = {
				is_matriarchal_religion_or_culture = yes
			}
			FROM = { add_law = enatic_succession }
		}
		else_if = {
			limit = {
				culture_group = goblinoid_group
			}
			FROM = { add_law = enatic_cognatic_succession }
		}
		else_if = {
			limit = {
				NOR = {
					is_patriarchal_religion_or_culture = yes
					has_law = status_of_women_3
					has_law = status_of_women_2
					has_law = status_of_women_1
					has_law = status_of_women_0
				}
			}
			FROM = { add_law = true_cognatic_succession }
		}
		else_if = {
			limit = {
				OR = {
					culture = calishite
					AND = {
						is_female = yes
						is_tribal = no
						NOR = {
							has_law = status_of_women_1
							has_law = status_of_women_0
						}
					}
				}
			}
			FROM = { add_law = cognatic_succession }
		}
	}
}

character_event = {
	id = frmaint.14
	hide_window = yes
	is_triggered_only = yes # on_character_convert_religion

	trigger = {
		NOR = {
			is_reformed_religion = FROM # we should not block conversion of any characters nor remove a patron trait if the new religion is the reformed version of the character's old one
			has_character_flag = reverting_religion_change # not in a process of reverting religion change
		}
	}

	immediate = {
		if = {
			limit = { # some characters shouldn't be able to change religion except special cases
				OR = {
					is_immune_to_conversion_trigger = yes

					trigger_if = {
						limit = { # if the character is of any race except monster, block converting to the monster religion from a normal religion
							religion = monster_pantheon
							NOT = { trait = creature_monster } 
						}

						faerun_any_race = yes # we should check it in case the character is newly generated
						FROM = { NOT = { religion = monster_pantheon } }
					}
					trigger_else_if = {
						limit = { trait = creature_monster } # if the character is a monster, block any conversion, except converting to the monster religion

						NOT = { religion = monster_pantheon }
					}
				}
			}

			if = {
				limit = {
					has_character_flag = ignore_conversion_immunity
				}

				clr_character_flag = ignore_conversion_immunity # clear the flag and proceed with the conversion
			}
			else = { # otherwise we reverting the conversion

				log = "frmaint.14: Reverted religion change for [Root.GetFullName]. Current religion: [From.Religion.GetName], tried to change to: [Root.Religion.GetName]."

				set_character_flag = reverting_religion_change # we should mark the character, so they wouldn't go into the endless on_character_convert_religion events loop, crashing the game
				religion = FROM # this will start another instance of on_character_convert_religion, which the game will resolve first before moving on to the instructions below
				set_character_flag = reverting_religion_change # the flag was cleared after completing the instruction above, set it again: we still need it

				break = yes # don't remove the patrons
			}
		}

		evilcat_remove_patrons = yes
		if = {
			limit = {
				has_character_modifier = vow_of_poverty
				NOT = { religion = triadic }
			}
			remove_character_modifier = vow_of_poverty
		}
	}
}

character_event = {
	id = frmaint.15
	hide_window = yes
	is_triggered_only = yes

	ai = no

	trigger = {
		NOT = { has_global_flag = shieldmeet_year }
		is_save_game = no
	}
	immediate = {
		set_global_flag = shieldmeet_year
		character_event = { id = frmaint.16 months = 11 }
		character_event = { id = frmaint.19 years = 4 }
	}
}

character_event = {
	id = frmaint.16
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		clr_global_flag = shieldmeet_year
	}
}

character_event = {
	id = frmaint.19
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		set_global_flag = shieldmeet_year
		character_event = { id = frmaint.16 months = 11 }
		character_event = { id = frmaint.19 years = 4 }
	}
}

character_event = {
	id = frmaint.20
	hide_window = yes
	is_triggered_only = yes

	has_character_flag = reverting_religion_change

	immediate = {
		clr_character_flag = reverting_religion_change
	}
}

# Process ruler designed characters.
character_event = {
	id = frmaint.24
	hide_window = yes
	is_triggered_only = yes # on_chronicle_start

	min_age = 16

	trigger = {
		is_save_game = no
	}
	immediate = {
		trigger_switch = {
			on_trigger = trait
			creature_dwarf = { rd_age_up_dwarf = yes }
			creature_elf = { rd_age_up_elf = yes }
			creature_draegloth = { rd_age_up_elf = yes }
			creature_drow = { rd_age_up_elf = yes }
			creature_feyri = { rd_age_up_elf = yes }
			creature_gnome = { rd_age_up_rockgnome = yes }
			creature_half_elf = { rd_age_up_halfelf = yes }
			creature_halfling = { rd_age_up_halfling = yes }
		}

		if = {
			limit = { olrox_has_specific_sorc_origin = yes }
			set_character_flag = sorc_originrevealed
		}

		if = {
			limit = {
				OR = {
					culture_group = planetouched_group
					culture = half_sun_elf
					culture = half_moon_elf
					culture = half_sea_elf
					culture = half_wood_elf
					culture = half_green_elf
					culture = half_eladrin
					culture = half_shadar_kai
					culture = half_orc
					culture = half_ogre
					culture = half_gnoll
					culture = ogrillon
					#culture = spiritfolk
					culture = tamhi
				}
			}
			location = {
				ROOT = { culture = PREV }
			}
		}
		else_if = {
			limit = {
				OR = {
					culture = malison
					culture = abomination
					culture = halfblood
				}
			}
			culture = yuanti
		}
		else_if = {
			limit = {
				OR = {
					culture = cornugon
					culture = gelugon
					culture = erinyes
				}
			}
			culture = baatezu
		}
		else_if = {
			limit = {
				OR = {
					culture = succubus
					culture = nalfeshnee
					culture = cambion
					culture = balor
					culture = marilith
				}
			}
			culture = tanarri
		}
		else_if = {
			limit = {
				OR = {
					culture = ultroloth
					culture = mezzoloth
				}
			}
			culture = yugoloth
		}
		else_if = {
			limit = {
				culture = planetar
			}
			culture = angel
		}
		else_if = {
			limit = {
				culture = warden_archon
			}
			culture = archon
		}
		else_if = {
			limit = {
				OR = {
					culture = equinal
					culture = cervidal
					culture = musteval
					culture = arvoral
				}
			}
			culture = guardinal
		}
		else_if = {
			limit = {
				OR = {
					culture = storm_goliath
					culture = cloud_goliath
					culture = fire_goliath
					culture = frost_goliath
					culture = half_giant
				}
			}
			culture = goliath
		}
	}
}

character_event = {
	id = frmaint.26
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			AND = {
				has_minor_title = title_zulkir
				any_demesne_title = {
					NOR = {
						title = d_abjuration
						title = d_abjuration_exile
						title = d_conjuration
						title = d_conjuration_exile
						title = d_divination
						title = d_divination_exile
						title = d_enchantment
						title = d_enchantment_exile
						title = d_evocation
						title = d_evocation_exile
						title = d_illusion
						title = d_illusion_exile
						title = d_necromancy
						title = d_necromancy_exile
						title = d_transmutation
						title = d_transmutation_exile
					}
				}
			}
			AND = {
				NOT = { has_minor_title = title_zulkir }
				any_demesne_title = {
					OR = {
						title = d_abjuration
						title = d_abjuration_exile
						title = d_conjuration
						title = d_conjuration_exile
						title = d_divination
						title = d_divination_exile
						title = d_enchantment
						title = d_enchantment_exile
						title = d_evocation
						title = d_evocation_exile
						title = d_illusion
						title = d_illusion_exile
						title = d_necromancy
						title = d_necromancy_exile
						title = d_transmutation
						title = d_transmutation_exile
					}
				}
			}
		}
	}

	immediate = {
		if = {
			limit = {
				NOT = { has_minor_title = title_zulkir }
				any_demesne_title = {
					OR = {
						title = d_abjuration
						title = d_abjuration_exile
						title = d_conjuration
						title = d_conjuration_exile
						title = d_divination
						title = d_divination_exile
						title = d_enchantment
						title = d_enchantment_exile
						title = d_evocation
						title = d_evocation_exile
						title = d_illusion
						title = d_illusion_exile
						title = d_necromancy
						title = d_necromancy_exile
						title = d_transmutation
						title = d_transmutation_exile
					}
				}
			}
			give_minor_title = title_zulkir
		}
		else = {
			remove_title = title_zulkir
		}
	}
}

# character_event = {
# 	id = frmaint.27
# 	hide_window = yes

# 	is_triggered_only = yes
# 	has_character_flag = embraced_by_auril

# 	trigger = {
# 		NOT = { trait = patron_auril }
# 	}

# 	immediate = {
# 		remove_character_modifier = embraced_by_auril
# 		clr_character_flag = embraced_by_auril
# 	}
# }


character_event = {
	id = frmaint.28
	hide_window = yes
	is_triggered_only = yes

	has_character_flag = lycan_court

	trigger = {
		NOT = { has_character_modifier = known_lycan_modifier }
	}

	immediate = {
		add_character_modifier = {
			name = known_lycan_modifier
			duration = -1
		}
	}
}

province_event = { # needs to be two events so it doesn't double up if a game is reloaded. might be a more elegant way but can't think of it

	#BIG IMPORTANT NOTE: MONTH CONDITIONS GO FROM 0 to 11

	id = frmaint.30
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		NOT = {
			has_game_rule = {
				name = minor_story_events
				value = off
			}
		}
		year <= 1430 # Last event, don't forget to update.
	}

	immediate = {
		#to fire again in next hammer (month 1)
		if = {
			limit = {
				month == 0
			}
			repeat_event = { id = frmaint.30 years = 1 }
		}
		else_if = {
			limit = {
				month == 1
			}
			repeat_event = { id = frmaint.30 months = 11 }
		}
		else_if = {
			limit = {
				month == 2
			}
			repeat_event = { id = frmaint.30 months = 10 }
		}
		else_if = {
			limit = {
				month == 3
			}
			repeat_event = { id = frmaint.30 months = 9 }
		}
		else_if = {
			limit = {
				month == 4
			}
			repeat_event = { id = frmaint.30 months = 8 }
		}
		else_if = {
			limit = {
				month == 5
			}
			repeat_event = { id = frmaint.30 months = 7 }
		}
		else_if = {
			limit = {
				month == 6
			}
			repeat_event = { id = frmaint.30 months = 6 }
		}
		else_if = {
			limit = {
				month == 7
			}
			repeat_event = { id = frmaint.30 months = 5 }
		}
		else_if = {
			limit = {
				month == 8
			}
			repeat_event = { id = frmaint.30 months = 4 }
		}
		else_if = {
			limit = {
				month == 9
			}
			repeat_event = { id = frmaint.30 months = 3 }
		}
		else_if = {
			limit = {
				month == 10
			}
			repeat_event = { id = frmaint.30 months = 2 }
		}
		else = {
			repeat_event = { id = frmaint.30 months = 1 }
		}

		##Moander rampages in Mirtul 1357
		if = {
			limit = {
				year = 1357
				month < 5
				NOT = { has_global_flag = moander_rampaged }
			}
			set_global_flag = moander_rampaged
			c_yulash = {
				location = {
					if = {
						limit = {
							month == 0
						}
						province_event = { id = frstory.62 months = 4 }
					}
					else_if = {
						limit = {
							month == 1
						}
						province_event = { id = frstory.62 months = 3 }
					}
					else_if = {
						limit = {
							month == 2
						}
						province_event = { id = frstory.62 months = 2 }
					}
					else_if = {
						limit = {
							month == 3
						}
						province_event = { id = frstory.62 months = 1 }
					}
					else = {
						province_event = { id = frstory.62 }
					}
				}
			}
		}

		#Maalthiir's coup in Hillsfar in Eleasis 1357
		if = {
			limit = {
				year = 1357
				month < 8
				NOT = { has_global_flag = maalthiir_coup }
				c_hillsfar = {
					owner = {
						independent = yes
						NOT = { character = 56072 }
					}
				}
				c_56072 = {
					is_alive = yes
					is_landed = no
				}
			}
			set_global_flag = maalthiir_coup
			c_hillsfar = {
				location = {
					if = {
						limit = {
							month == 0
						}
						province_event = { id = frstory.70 months = 7 }
					}
					else_if = {
						limit = {
							month == 1
						}
						province_event = { id = frstory.70 months = 6 }
					}
					else_if = {
						limit = {
							month == 2
						}
						province_event = { id = frstory.70 months = 5 }
					}
					else_if = {
						limit = {
							month == 3
						}
						province_event = { id = frstory.70 months = 4 }
					}
					else_if = {
						limit = {
							month == 4
						}
						province_event = { id = frstory.70 months = 3 }
					}
					else_if = {
						limit = {
							month == 5
						}
						province_event = { id = frstory.70 months = 2 }
					}
					else_if = {
						limit = {
							month == 6
						}
						province_event = { id = frstory.70 months = 1 }
					}
					else = {
						province_event = { id = frstory.70 }
					}
				}
			}
		}
		##Greneire attacks Obould at 1367
		c_30550 = {
			if = {
				limit = { 
					always = yes 
					character = yes 
					is_alive = yes
					NOT = { trait = chosen_gruumsh } 
				}

				character_event = {
					id = frstory.82
					days = 12
				}
			}
		}
		if = {
			limit = {
				year = 1367
				NOT = { has_global_flag = greneire_spawned }
				c_30550 = {
					is_alive = yes
					has_landed_title = c_felbarr
				}
			}
			c_felbarr = {
				location = {
					if = {
						limit = {
							month == 0
						}
						province_event = { id = frstory.78 months = 6 }
					}
					else_if = {
						limit = {
							month == 1
						}
						province_event = { id = frstory.78 months = 5 }
					}
					else_if = {
						limit = {
							month == 2
						}
						province_event = { id = frstory.78 months = 4 }
					}
					else_if = {
						limit = {
							month == 3
						}
						province_event = { id = frstory.78 months = 3 }
					}
					else_if = {
						limit = {
							month == 4
						}
						province_event = { id = frstory.78 months = 2 }
					}
					else_if = {
						limit = {
							month == 5
						}
						province_event = { id = frstory.78 months = 1 }
					}
					else_if = {
						limit = {
							month == 6
						}
						province_event = { id = frstory.78 }
					}
				}
			}
		}
		##Caelar Argent forms the Crusade in Uktar 1368
		if = {
			limit = {
				year = 1368
				NOT = { has_global_flag = caelar_argent_spawned }
			}
			set_global_flag = caelar_argent_spawned
			c_dragonspear = {
				location = {
					if = {
						limit = {
							month == 0
						}
						province_event = { id = frstory.72 months = 10 }
					}
					else_if = {
						limit = {
							month == 1
						}
						province_event = { id = frstory.72 months = 9 }
					}
					else_if = {
						limit = {
							month == 2
						}
						province_event = { id = frstory.72 months = 8 }
					}
					else_if = {
						limit = {
							month == 3
						}
						province_event = { id = frstory.72 months = 7 }
					}
					else_if = {
						limit = {
							month == 4
						}
						province_event = { id = frstory.72 months = 6 }
					}
					else_if = {
						limit = {
							month == 5
						}
						province_event = { id = frstory.72 months = 5 }
					}
					else_if = {
						limit = {
							month == 6
						}
						province_event = { id = frstory.72 months = 4 }
					}
					else_if = {
						limit = {
							month == 7
						}
						province_event = { id = frstory.72 months = 3 }
					}
					else_if = {
						limit = {
							month == 8
						}
						province_event = { id = frstory.72 months = 2 }
					}
					else_if = {
						limit = {
							month == 9
						}
						province_event = { id = frstory.72 months = 1 }
					}
					else = {
						province_event = { id = frstory.72 }
					}
				}
			}
		}

		##Nalavarauthatoryl attacks Cormyr/the Obarskyrs in Mirtul 1371
		if = {
			limit = {
				year = 1371
				month < 5
				NOT = { has_global_flag = nalavara_spawned }
				FROM = { # Wants a character scope for no reason.
					any_playable_ruler = {
						dynasty = 500 #Obarskyr
						num_of_king_titles >= 1
					}
				}
			}
			set_global_flag = nalavara_spawned
			if = {
				limit = {
					k_cormyr = {
						owner = { dynasty = 500 }
					}
				}
				k_cormyr = {
					owner = {
						capital_scope = {
							if = {
								limit = {
									month == 0
								}
								province_event = { id = frstory.56 months = 4 }
							}
							else_if = {
								limit = {
									month == 1
								}
								province_event = { id = frstory.56 months = 3 }
							}
							else_if = {
								limit = {
									month == 2
								}
								province_event = { id = frstory.56 months = 2 }
							}
							else_if = {
								limit = {
									month == 3
								}
								province_event = { id = frstory.56 months = 1 }
							}
							else = {
								province_event = { id = frstory.56 }
							}
						}
					}
				}
			}
			else = {
				random_playable_ruler = {
					limit = {
						dynasty = 500
						higher_tier_than = DUKE
					}
					capital_scope = {
						if = {
							limit = {
								month == 0
							}
							province_event = { id = frstory.56 months = 4 }
						}
						else_if = {
							limit = {
								month == 1
							}
							province_event = { id = frstory.56 months = 3 }
						}
						else_if = {
							limit = {
								month == 2
							}
							province_event = { id = frstory.56 months = 2 }
						}
						else_if = {
							limit = {
								month == 3
							}
							province_event = { id = frstory.56 months = 1 }
						}
						else = {
							province_event = { id = frstory.56 }
						}
					}
				}
			}
		}

		##Shade returns in Hammer 1372
		if = {
			limit = {
				year = 1372
				month < 1
				NOT = { has_global_flag = shadovar_spawned }
			}
			set_global_flag = shadovar_spawned
			c_shoal_of_thirst = {
				location = {
					province_event = { id = frstory.31 }
				}
			}
		}

		##Bane returns in Alturiak 1372
		if = {
			limit = {
				year = 1372
				has_global_flag = bane_dead
				month < 2
				NOT = { has_global_flag = bane_returned }
			}
			set_global_flag = bane_returned
			c_zhentil_keep = {
				location = {
					if = {
						limit = {
							month == 0
						}
						province_event = { id = frstory.8 months = 1 }
					}
					else = {
						province_event = { id = frstory.8 }
					}
				}
			}
		}

		##Mephistopheles in Waterdeep in Alturiak 1373 (Hordes of the Underdark)
		if = {
			limit = {
				year = 1373
				month < 2
				NOT = { has_global_flag = mephistopheles_spawned }
				#check for Undrentide happening
			}
			set_global_flag = mephistopheles_spawned
			c_waterdeep = {
				location = {
					if = {
						limit = {
							month == 0
						}
						province_event = { id = frstory.21 months = 1 }
					}
					else = {
						province_event = { id = frstory.21 }
					}
				}
			}
		}

		##Tchazzar returns to Chessenta in Nightal 1374
		if = {
			limit = {
				year = 1374
				NOT = { has_global_flag = tchazzar_spawned }
			}
			set_global_flag = tchazzar_spawned
			c_cimbar = {
				location = {
					if = {
						limit = {
							month == 0
						}
						province_event = { id = frstory.41 months = 11 }
					}
					else_if = {
						limit = {
							month == 1
						}
						province_event = { id = frstory.41 months = 10 }
					}
					else_if = {
						limit = {
							month == 2
						}
						province_event = { id = frstory.41 months = 9 }
					}
					else_if = {
						limit = {
							month == 3
						}
						province_event = { id = frstory.41 months = 8 }
					}
					else_if = {
						limit = {
							month == 4
						}
						province_event = { id = frstory.41 months = 7 }
					}
					else_if = {
						limit = {
							month == 5
						}
						province_event = { id = frstory.41 months = 6 }
					}
					else_if = {
						limit = {
							month == 6
						}
						province_event = { id = frstory.41 months = 5 }
					}
					else_if = {
						limit = {
							month == 7
						}
						province_event = { id = frstory.41 months = 4 }
					}
					else_if = {
						limit = {
							month == 8
						}
						province_event = { id = frstory.41 months = 3 }
					}
					else_if = {
						limit = {
							month == 9
						}
						province_event = { id = frstory.41 months = 2 }
					}
					else_if = {
						limit = {
							month == 10
						}
						province_event = { id = frstory.41 months = 1 }
					}
					else = {
						province_event = { id = frstory.41 }
					}
				}
			}
		}

		##King of Shadows in Alturiak 1374
		if = {
			limit = {
				year = 1374
				month < 2
				NOT = { has_global_flag = king_of_shadows_spawned }
				#later will also check if NWN1 has happened!
			}
			set_global_flag = king_of_shadows_spawned
			c_neverwinter = {
				location = {
					if = {
						limit = {
							month == 0
						}
						province_event = { id = frstory.11 months = 1 }
					}
					else = {
						province_event = { id = frstory.11 }
					}
				}
			}
		}

		##Warlock Knights appear in Hammer 1430
		if = {
			limit = {
				year = 1430
				month < 1
				NOT = { has_global_flag = voice_of_telos_spawned }
				#check for Spellplague happening
			}
			set_global_flag = voice_of_telos_spawned
			c_darmshall = {
				location = {
					province_event = { id = frstory.51 }
				}
			}
		}
	}
}

# character_event = {
# 	id = frmaint.31
# 	hide_window = yes

# 	is_triggered_only = yes

# 	immediate = {
# 		create_character = {
# 			age = 30
# 			random_traits = yes
# 			female = random
# 			religion = event_target:oldroot
# 			culture = event_target:oldroot
# 			dynasty = random
# 		}
# 		new_character = {
# 			religion = event_target:oldroot
# 			add_trait = patron_malar
# 			ROOT = {
# 				abdicate_to = PREV
# 			}
# 		}
# 		clear_event_target = oldroot
# 	}
# }

# character_event = {
# 	id = frmaint.32
# 	hide_window = yes

# 	is_triggered_only = yes

# 	immediate = {
# 		any_artifact = {
# 			limit = { artifact_type = claws_of_malar }
# 			destroy_artifact = this
# 		}
# 	}
# }

#character_event = { # destroys Claws of Malar of heir is not an adherent
#	id = frmaint.33
#	hide_window = yes
#
#	is_triggered_only = yes
#
#	trigger = {
#		any_artifact = {
#			artifact_type = claws_of_malar
#		}
#		# NOT = { trait = patron_malar }
#	}
#
#	immediate = {
#		recalc_succession = yes
#		if = {
#			limit = {
#				current_heir = {
#					NOT = { trait = patron_malar }
#				}
#			}
#			destroy_artifact = claws_of_malar
#		}
#	}
#}

character_event = { # preserve some government types on succession
	id = frmaint.34
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			is_landed = no
			FROM = {
				is_primary_holder_title = yes
				holder_scope = {
					character = ROOT
				}
			}
		}
	}

	immediate = {
		if = {
			limit = {
				FROMFROM = { government = democratic_feudal_government }
			}
			set_character_flag = democratic_feudal_government_preserve
		}
		else_if = {
			limit = {
				FROMFROM = { government = theocracy_government }
			}
			set_character_flag = theocracy_government_preserve
		}
		else_if = {
			limit = {
				FROMFROM = { government = divine_feudal_government }
			}
			set_character_flag = divine_feudal_government_preserve
		}
		character_event = { id = frmaint.35 days = 1 }
	}
}

character_event = { # clear flags after succession
	id = frmaint.35
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		clr_character_flag = democratic_feudal_government_preserve
		clr_character_flag = theocracy_government_preserve
		clr_character_flag = divine_feudal_government_preserve
		clr_character_flag = promoted_received_title
	}
}

character_event = { # preserve elective succession for promoted barons and landless characters
	id = frmaint.36
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			has_character_flag = promoted_received_title
			government = republic_government
			government = baron_theocracy_government
		}
	}

	immediate = {
		character_event = { id = womenstatusmaint.1 days = 1 }
		character_event = { id = frmaint.37 days = 1 }
	}
}

character_event = {
	id = frmaint.37
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			government = democratic_feudal_government
			government = theocracy_government
		}
	}

	immediate = {
		if = {
			limit = { government = democratic_feudal_government }
			any_demesne_title = {
				limit = {
					higher_tier_than = BARON
				}
				add_law = {
					law = succ_popular_elective
					cooldown = no
					opinion_effect = no
				}
			}
		}
		else_if = {
			limit = { government = theocracy_government }
			any_demesne_title = {
				limit = {
					higher_tier_than = BARON
				}
				add_law = {
					law = succ_divine_elective
					cooldown = no
					opinion_effect = no
				}
			}
		}
	}
}

# convert baron tier republics and theocracies upon becoming counts
# Fired from GRANT_LANDED_TITLE_INTERACTION_ACCEPT_EVENT on_action
character_event = {
	id = frmaint.38
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		lower_tier_than = COUNT
	}

	immediate = {
		set_character_flag = promoted_received_title
		if = {
			limit = {
				government = republic_government
			}
			set_character_flag = democratic_feudal_government_preserve
			character_event = { id = frmaint.35 days = 1 }
		}
		else_if = {
			limit = {
				government = baron_theocracy_government
			}
			set_character_flag = theocracy_government_preserve
			character_event = { id = frmaint.35 days = 1 }
		}
		character_event = { id = frmaint.35 days = 1 }
	}
}

# maintain popular_elective and divine_elective for rulers that have them
# Fired from GRANT_LANDED_TITLE_INTERACTION_ACCEPT_EVENT and on_new_holder_usurpation on_actions
character_event = {
	id = frmaint.39
	hide_window = yes

	is_triggered_only = yes

	only_playable = yes

	trigger = {
		primary_title = {
			OR = {
				has_law = succ_popular_elective
				has_law = succ_divine_elective
			}
		}
	}

	immediate = {
		character_event = { id = frmaint.37 days = 1 }
	}
}


character_event = {
	id = frmaint.40
	hide_window = yes

	war = no
	only_playable = yes

	trigger = {
		has_landed_title = d_slave_revolt
	}

	is_triggered_only = yes

	immediate = {
		d_slave_revolt = {
			unsafe_destroy_landed_title = THIS # you can only destroy landless titles if using unsafe
		}
	}
}

character_event = {
	id = frmaint.41
	hide_window = yes

	is_triggered_only = yes

	#was unsure if it should be character or province, but root is character for on_new_holder_usurpation so...

	trigger = {
		NOR = {
			religion = dwarven_pantheon
			religion = laduguer
			culture_group = dwarf_group
		}
		FROM = {
			location = {
				has_province_modifier = dwarfhold_mod
			}
		}
	}

	immediate = {
		FROM = {
			location = {
				remove_province_modifier = dwarfhold_mod
				add_province_modifier = {
					name = ruined_dwarfhold
					duration = -1
				}
			}
		}
	}
}

character_event = { # Destroy army of shadows when king is dead
	id = frmaint.43
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_character_flag = i_am_king_of_shadows
	}

	immediate = {
		k_army_of_shadows = {
			destroy_landed_title = THIS
		}
	}
}

#Clear monk meditations if incapable
character_event = {
	id = frmaint.45
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_incapable = yes
		OR = {
			has_character_modifier = monk_diplo
			has_character_modifier = monk_martial
			has_character_modifier = monk_stewardship
			has_character_modifier = monk_intrigue
			has_character_modifier = monk_learning
		}
	}

	immediate = {
		remove_character_modifier = monk_diplo
		remove_character_modifier = monk_martial
		remove_character_modifier = monk_stewardship
		remove_character_modifier = monk_intrigue
		remove_character_modifier = monk_learning
	}
}

character_event = { # repeal inappropriate law - checked every 10 years
	id = frmaint.46
	desc = EVTDESC_FRMAINT_46
	picture = GFX_evt_council_quarrelling

	only_playable = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			AND = {
				has_law = revoke_title_law_2
				holder_scope = {
					OR = {
						religion = ten_thousand_gods
						olrox_is_good_religion_trigger = yes
						has_religion_feature = religion_cosmopolitan
					}
				}
			}
			AND = {
				OR = {
					has_law = vassal_wars_law_1
					has_law = vassal_wars_law_2
				}
				holder_scope = {
					NOR = {
						primary_title = {
							has_law = ze_administration_laws_2
						}
						religion = ten_thousand_gods
						olrox_is_good_religion_trigger = yes
					}
				}
			}
			#AND = { #we'll see about this one
			#	has_law = law_voting_power_0
			#	holder_scope = {
			#		OR = {
			#			religion = ten_thousand_gods
			#			olrox_is_good_religion_trigger = yes
			#		}
			#	}
			#}
		}
	}

	option = {
		name = EVTOPTA_FRMAINT_46
		if = {
			limit = {
				has_law = revoke_title_law_2
				holder_scope = {
					OR = {
						religion = ten_thousand_gods
						olrox_is_good_religion_trigger = yes
						has_religion_feature = religion_cosmopolitan
					}
				}
			}
			primary_title = {
				add_law = revoke_title_law_1
			}
		}
		if = {
			limit = {
				OR = {
					has_law = vassal_wars_law_1
					has_law = vassal_wars_law_2
				}
				holder_scope = {
					NOR = {
						primary_title = {
							has_law = ze_administration_laws_2
						}
						religion = ten_thousand_gods
						olrox_is_good_religion_trigger = yes
					}
				}
			}
			primary_title = {
				add_law = vassal_wars_law_0
			}
		}
		#if = {
		#	limit = {
		#		has_law = law_voting_power_0
		#		holder_scope = {
		#			OR = {
		#				religion = ten_thousand_gods
		#				olrox_is_good_religion_trigger = yes
		#			}
		#		}
		#	}
		#	primary_title = {
		#		add_law = law_voting_power_1
		#	}
		#}
	}
	option = {
		name = EVTOPTB_FRMAINT_46

		if = {
			limit = {
				any_realm_character = {
					count >= 100
				}
			}

			custom_tooltip = {
				text = EVTOPTB_TOOLTIP_FRMAINT_46
	
				hidden_effect = {
					any_realm_character = {
						opinion = {
							who = ROOT
							modifier = opinion_tyrant
							months = 180
						}
					}
				}
			}
		}
		else = {
			any_realm_character = {
				opinion = {
					who = ROOT
					modifier = opinion_tyrant
					months = 180
				}
			}
		}
	}
}

character_event = {
	id = frmaint.47
	hide_window = yes

	is_triggered_only = yes

	max_age = 16

	trigger = {
		trait = bastard
		mother_even_if_dead = {
			OR = {
				religion_has_polyamory = yes

				trigger_if = {
					limit = { is_married = yes }

					is_married_matrilineally = no
					spouse = {
						religion_has_polyamory = yes
					}
				}
				trigger_else_if = {
					limit = { is_consort = yes }

					consort = {
						religion_has_polyamory = yes
					}
				}
			}
		}
	}

	immediate = {
		remove_trait = bastard
		add_trait = legit_bastard

		if = {
			limit = {
				true_father = { always = yes } # father exists
				OR = {
					employer = { # the child is at father's court and father is noble
						ROOT = {
							true_father = {
								is_alive = yes
								is_lowborn = no
								character = PREVPREV
							}
						}
					}

					trigger_if = { # mother is lowborn and father is noble
						limit = { mother_even_if_dead = { is_lowborn = yes } }

						true_father = { is_lowborn = no }
					}
				}
			}

			true_father_even_if_dead = {
				ROOT = {
					dynasty = PREV
					set_father = PREV
					recalc_succession = yes
				}
			}
		}
		else = {
			true_father_even_if_dead = {
				if = {
					limit = { always = yes }

					ROOT = {
						set_father = PREV
					}
				}
			}

			mother_even_if_dead = {
				ROOT = {
					dynasty = PREV
					recalc_succession = yes
				}
			}
		}
	}
}

character_event = {
	id = frmaint.48
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		muhjari_has_syncretism = yes
		NOT = { religion = muhjari }
		NOT = { has_character_flag = reverting_religion_change }
	}

	immediate = {
		remove_character_modifier = syncretic_10k
		remove_character_modifier = syncretic_abyssal
		remove_character_modifier = syncretic_ancestral
		remove_character_modifier = syncretic_arcane
		remove_character_modifier = syncretic_asathalfinare
		remove_character_modifier = syncretic_bahamut
		remove_character_modifier = syncretic_beholder
		remove_character_modifier = syncretic_blue_flame
		remove_character_modifier = syncretic_chauntea
		remove_character_modifier = syncretic_cyric
		remove_character_modifier = syncretic_draconic
		remove_character_modifier = syncretic_dwarf
		remove_character_modifier = syncretic_earthmother
		remove_character_modifier = syncretic_eilistraee
		remove_character_modifier = syncretic_elf
		remove_character_modifier = syncretic_enlil
		remove_character_modifier = syncretic_entropy
		remove_character_modifier = syncretic_faceless
		remove_character_modifier = syncretic_geomancy
		remove_character_modifier = syncretic_ghaunadaur
		remove_character_modifier = syncretic_giant
		remove_character_modifier = syncretic_gnome
		remove_character_modifier = syncretic_goblin
		remove_character_modifier = syncretic_halfling
		remove_character_modifier = syncretic_illithid
		remove_character_modifier = syncretic_infernal
		remove_character_modifier = syncretic_jaziri
		remove_character_modifier = syncretic_kahin
		remove_character_modifier = syncretic_karontor
		remove_character_modifier = syncretic_kiaransalee
		remove_character_modifier = syncretic_kossuth
		remove_character_modifier = syncretic_laduguer
		remove_character_modifier = syncretic_lolth
		remove_character_modifier = syncretic_loviatar
		remove_character_modifier = syncretic_maztica
		remove_character_modifier = syncretic_nogari
		remove_character_modifier = syncretic_orc
		remove_character_modifier = syncretic_pantheist
		remove_character_modifier = syncretic_qisma
		remove_character_modifier = syncretic_sylvan
		remove_character_modifier = syncretic_thasmudyanic
		remove_character_modifier = syncretic_tiamat
		remove_character_modifier = syncretic_ubtao
		remove_character_modifier = syncretic_ulutiuan
		remove_character_modifier = syncretic_urdlen
		remove_character_modifier = syncretic_uthgardt
		remove_character_modifier = syncretic_vaprak
		remove_character_modifier = syncretic_vhaeraun
		remove_character_modifier = syncretic_yuir
		remove_character_modifier = syncretic_triadic
		remove_character_modifier = syncretic_rashemen
		remove_character_modifier = syncretic_chessic
		remove_character_modifier = syncretic_mercantile
		remove_character_modifier = syncretic_inventive
		remove_character_modifier = syncretic_joyful
		remove_character_modifier = syncretic_calishite
		remove_character_modifier = syncretic_lapal
		remove_character_modifier = syncretic_mulhorandi
		remove_character_modifier = syncretic_untheric
		remove_character_modifier = syncretic_solar
		remove_character_modifier = syncretic_fury
		remove_character_modifier = syncretic_natural
		remove_character_modifier = syncretic_primordial
		remove_character_modifier = syncretic_tuigan
		remove_character_modifier = syncretic_martial
		remove_character_modifier = syncretic_deadthree
		remove_character_modifier = syncretic_shadow
		remove_character_modifier = syncretic_scale
		remove_character_modifier = syncretic_padhran
		remove_character_modifier = syncretic_shou
		remove_character_modifier = syncretic_chung
		remove_character_modifier = syncretic_9t
		remove_character_modifier = syncretic_adama
		remove_character_modifier = syncretic_animist
		remove_character_modifier = syncretic_qukoku
	}
}


character_event = {
	id = frmaint.49
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		health < 1
		is_true_immortal = no
		faerun_immortal_race_trigger = yes
	}

	immediate = {
		if = {
			limit = {
				is_sick_or_injured_trigger = yes
			}
			death = { death_reason = death_trait }
		}
		else = {
			death = { death_reason = death_poor_health }
		}
	}
}

character_event = {
	id = frmaint.51
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		set_gender = opposite
	}
}

#death cheese maint
character_event = {
	id = frmaint.52
	desc = FRMAINT.52
	picture = GFX_evt_forest_b
	notification = yes

	is_triggered_only = yes

	trigger = {
		any_demesne_province = {
			has_province_modifier = death_cheese
			NOR = {
				owner = {
					culture = andt
				}
				culture = andt
			}
		}
	}

	immediate = {
		any_demesne_province = { remove_province_modifier = death_cheese }
	}

	option = {
		name = OK
	}
}

character_event = {
	id = frmaint.53
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		random_playable_ruler = {
			limit = { religion = mulhorandi_faith }
			religion_authority = {
				modifier = dogmatic_religion_2
			}
		}
		random_playable_ruler = {
			limit = { religion = untheric_faith }
			religion_authority = {
				modifier = dogmatic_religion_2
			}
		}
	}
}

character_event = {
	id = frmaint.54
	desc = EVTDESC_FRMAIN_54
	picture = GFX_evt_bishop
	portrait = event_target:spawned_character
	
	is_triggered_only = yes
	
	option = {
		name = OK
	}
}

# Setup succession after government changed.
character_event = {
	id = frmaint.55
	hide_window = yes
	only_rulers = yes

	is_triggered_only = yes # on_new_holder

	trigger = {
		ROOT = {
			NOT = { government = FROMFROM }
			OR = {
				government = democratic_feudal_government
				government = divine_feudal_government
				government = nomadic_tribal_government
				government = ordning_government
				government = theocracy_government
				government = baron_theocracy_government
			}
		}
	}

	immediate = {
		ROOT = {
			character_event = { id = frmaint.56 }
			character_event = { id = frmaint.56 days = 1 }
		}
	}
}

# Setup succession after government changed, delayed action.
character_event = {
	id = frmaint.56
	hide_window = yes

	is_triggered_only = yes # frmaint.55

	immediate = {
		FROMFROM = {
			if = {
				limit = {
					holder_scope = { government = democratic_feudal_government }
					NOT = { has_law = succ_popular_elective }
				}
				log = "frmaint.56: Changed succession for [This.GetFullName] to popular elective"
				add_law = {
					law = succ_popular_elective
					opinion_effect = no
				}
			}
			else_if = {
				limit = {
					holder_scope = { government = divine_feudal_government }
					NOT = { has_law = succ_divine_dynastic }
				}
				log = "frmaint.56: Changed succession for [This.GetFullName] to divine dynastic"
				add_law = {
					law = succ_divine_dynastic
					opinion_effect = no
				}
			}
			else_if = {
				limit = {
					holder_scope = { government = nomadic_tribal_government }
					NOT = { has_law = succ_nomadic_elective }
				}
				log = "frmaint.56: Changed succession for [This.GetFullName] to nomadic elective"
				add_law = {
					law = succ_nomadic_elective
					opinion_effect = no
				}
			}
			else_if = {
				limit = {
					holder_scope = { government = ordning_government }
					NOT = { has_law = succ_ordning }
				}
				log = "frmaint.56: Changed succession for [This.GetFullName] to ordning"
				add_law = {
					law = succ_ordning
					opinion_effect = no
				}
			}
			else_if = {
				limit = {
					holder_scope = {
						government = theocracy_government
						z_druid = yes
					}
					NOR = {
						has_law = succ_divine_elective
						has_law = succ_divine_dynastic
						has_law = succ_divine_cleric
						has_law = succ_divine_druid
						has_law = succ_divine_monk
					}
				}
				log = "frmaint.56: Changed succession for [This.GetFullName] to druid elective"
				add_law = {
					law = succ_divine_druid
					opinion_effect = no
				}
			}
			else_if = {
				limit = {
					holder_scope = { government = theocracy_government }
					NOR = {
						has_law = succ_divine_elective
						has_law = succ_divine_dynastic
						has_law = succ_divine_cleric
						has_law = succ_divine_druid
						has_law = succ_divine_monk
					}
				}
				log = "frmaint.56: Changed succession for [This.GetFullName] to divine elective"
				add_law = {
					law = succ_divine_elective
					opinion_effect = no
				}
			}
			else_if = {
				limit = {
					holder_scope = { government = baron_theocracy_government }
					NOT = { has_law = succ_open_elective }
				}
				add_law = {
					law = succ_open_elective
					opinion_effect = no
				}
			}

			# Extra setup for theocratic gender succession.
			if = {
				limit = {
					holder_scope = {
						OR = {
							is_theocracy = yes
							government = theocracy_government
						}
					}
				}
				if = {
					limit = {
						holder_scope = {
							religion_allows_male_temple_holders = yes
							religion_allows_female_temple_holders = yes
						}
					}
					add_law = {
						law = true_cognatic_succession
						opinion_effect = no
					}
				}
				else_if = {
					limit = {
						holder_scope = {
							religion_allows_male_temple_holders = yes
							religion_allows_female_temple_holders = no
						}
					}
					add_law = {
						law = agnatic_succession
						opinion_effect = no
					}
				}
				else = {
					add_law = {
						law = enatic_succession
						opinion_effect = no
					}
				}
			}
		}
	}
}

# Spawn more courtiers to fill empty council.
# Helps matriarchial rulers especially.
character_event = {
	id = frmaint.57
	hide_window = yes

	is_triggered_only = yes
	only_playable = yes

	trigger = {
		is_landed = yes
		primary_title = {
			mercenary = no
			holy_order = no
			temporary = no
		}
		has_full_court = no
	}

	immediate = {
		if = {
			limit = {
				NOT = { job_chancellor = { always = yes } }
			}
			spawn_random_courtier_effect = yes
		}
		if = {
			limit = {
				NOT = { job_marshal = { always = yes } }
			}
			spawn_random_courtier_effect = yes
		}
		if = {
			limit = {
				NOT = { job_treasurer = { always = yes } }
			}
			spawn_random_courtier_effect = yes
		}
		if = {
			limit = {
				NOT = { job_spymaster = { always = yes } }
			}
			spawn_random_courtier_effect = yes
		}
		if = {
			limit = {
				NOT = { job_spiritual = { always = yes } }
			}
			spawn_random_courtier_effect = yes
		}
	}
}